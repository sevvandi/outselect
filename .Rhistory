out <- InstSpace(d=2, vis=TRUE)
ii <- 1
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 2
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 3
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 4
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 5
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 6
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 6
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 7
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 8
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
table(out$algorithms)
devtools::load_all()
out <- InstSpace(d=2, vis=TRUE)
table(out$algorithms)
ii <- 1
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 2
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 3
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 4
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 5
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 6
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 7
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
ii <- 8
ggplot2::ggplot(data=out$coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=out$preds10[,ii])) + ggplot2::ggtitle(colnames(out$preds10)[ii])
head(perfs)
data("perf_vals_roc_subset", envir=e)
perfs <- perf_vals_roc_subset
head(perfs)
data("perf_vals_mm", envir=e)
perfs <- perf_vals_mm
head(perfs)
data("features_mm")
colnames(features_mm)
filenames_mm <- features_mm[,1]
usesthis::use_data(filenames_mm)
usethis::use_data(filenames_mm)
filenames_pr
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
df <- ddsp$dfind
dim(df)
colnames(df)
library("ggplot2")
ggplot(df, aes(average, std)) + geom_point(aes(color=source))
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
df <- ddsp$dfind
library("ggplot2")
ggplot(df, aes(average, std)) + geom_point(aes(color=source))
ggplot(df, aes(average, std)) + geom_point(aes(color=source)) + theme(legend.position="none") + xlab("Difficulty") + ylab("Diversity")
devtools::load_all()
df2 <- ddsp$dfsrc
ggplot(df2, aes(average, std)) + geom_point(aes(color=source)) + theme(legend.position="none") + xlab("Difficulty") + ylab("Diversity")
head(df2)
head(Df)
head(Df)
head(df)
ddsp <- DifficultyDiversitySpace()
source_avg
source_std
source_avg[,1]
source_std[,1]
source_std[ ,2]
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
df <- ddsp$dfall
ddsp <- DifficultyDiversitySpace()
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
# ROC values
data("perf_vals_roc_subset", envir=e)
perfs <- perf_vals_roc_subset
data("filenames_roc", envir=e)
filenames <- filenames_roc
# ROC values
data("perf_vals_roc_subset", envir=e)
perfs <- perf_vals_roc_subset
data("filenames_roc", envir=e)
filenames <- filenames_roc
e <- new.env()
# ROC values
data("perf_vals_roc_subset", envir=e)
perfs <- perf_vals_roc_subset
data("filenames_roc", envir=e)
filenames <- filenames_roc
# difficulty is 1 - average performance
mean_vals <- 1- apply(perfs, 1, mean)
mean_vals
sd_vals <- apply(perfs, 1, sd)
file_source <- GetFileSources(filenames)
file_source
df <- cbind.data.frame(filenames, file_source, mean_vals, sd_vals)
head(df)
colnames(df) <- c("filename", "source", "difficulty", "diversity" )
source_avg <- stats::aggregate(df$average, by=list(df$source), FUN=mean)
devtools::load_all()
ddsp <- DifficultyDiversitySpace()
df <- ddsp$dfall
ggplot(df, aes(difficulty, diversity)) + geom_point(aes(color=source)) + theme(legend.position="none") + xlab("Difficulty") + ylab("Diversity")
df2 <- ddsp$dfsrc
ggplot(df2, aes(average, std)) + geom_point(aes(color=source)) + theme(legend.position="none") + xlab("Difficulty") + ylab("Diversity")
head(df2)
ggplot(df2, aes(source_difficulty, source_diversity)) + geom_point(aes(color=source)) + theme(legend.position="none") + xlab("Difficulty") + ylab("Diversity")
which(df2$source_difficulty >0.5)
df2$source[ which(df2$source_difficulty >0.5)]
df2$source
ggplot(df, aes(difficulty, diversity)) + geom_point(aes(color=source)) + theme(legend.position="none") + xlab("Difficulty") + ylab("Diversity")
ggplot(df2, aes(source_difficulty, source_diversity)) + geom_point(aes(color=source)) + theme(legend.position="none") + xlab("Difficulty") + ylab("Diversity")
data("perf_vals_roc_all")
colnames(perf_vals_roc_all)
devtools::load_all()
devtools::load_all()
out <-  SensitivityToNormMixedMod(1)
Q
devtools::load_all()
?sweep
devtools::load_all()
devtools::load_all()
data("features_all")
feat <- features_all
colnames(feat)
install.packages("IsolationForest")
install.packages("IsolationForest", repos="http://R-Forge.R-project.org")
library("IsolationForest")
citation(IsolationForest)
citation(package="IsolationForest")
devtools::load_all()
# ---- Sensitivity to normalization datasets ----
outdat <- SensitivityNormDatasets(1, 0.05)
xi_05 <- outdat$xi_sensitive_num
hist(xi_05)
density(xi_05)
plot(density(xi_05))
plot(density(xi_05), xlim=c(0,14))
?density
plot(density(xi_05, kernel="rectangular"), xlim=c(0,14))
plot(density(xi_05, kernel="gaussian"), xlim=c(0,14))
?hist
lines(density(xi_05))
hist(xi_05, prob=TRUE)
lines(density(xi_05))
lines(density(xi_05, adjust=2))
?density
library("ggplot2")
head(xi_05)
colnames(xi_05)
ggplot(xi_05, aes=xi_05) + geom_density()
xi_05 <- as.dataframe(outdat$xi_sensitive_num)
ggplot(xi_05, aes=xi_05) + geom_density()
xi_05 <- as.data.frame(outdat$xi_sensitive_num)
ggplot(xi_05, aes=xi_05) + geom_density()
ggplot(xi_05, aes=xi_05) + geom_density(aes=xi_05)
ggplot(xi_05, aes=xi_05) + geom_density(x=xi_05)
ggplot(xi_05, aes(x=xi_05)) + geom_density(x=xi_05)
ggplot(xi_05, aes(x=xi_05)) + geom_density()
colnames(xi_05)
colnames(xi_05) <- "xi_05"
ggplot(xi_05, aes(x=xi_05)) + geom_density()
ggplot(xi_05, aes(x=xi_05)) + + geom_hist() + geom_density()
ggplot(xi_05, aes(x=xi_05)) + + geom_histogram() + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram() + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram() + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..)) + geom_density() + theme_bw()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..), binwidth = 5) + geom_density() + theme_bw()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..), binwidth = 14) + geom_density() + theme_bw()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..), binwidth = 1) + geom_density() + theme_bw()
dim(xi_05)
outdat <- SensitivityNormDatasets(1, 0.10)
xi_10 <- as.data.frame(outdat$xi_sensitive_num)
outdat <- SensitivityNormDatasets(1, 0.15)
xi_15 <- as.data.frame(outdat$xi_sensitive_num)
outdat <- SensitivityNormDatasets(1, 0.20)
xi_20 <- as.data.frame(outdat$xi_sensitive_num)
xi_vals <- cbind.data.frame(xi_05, xi_10, xi_15, xi_20)
colnames(xi_vals)
colnames(xi_vals) <- c("xi_05", "xi_10", "xi_15", "xi_20")
library("reshape2")
xi_melt <- melt(xi_vals)
head(xi_melt)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..)) + geom_density() + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25,, binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25, binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1) + geom_density(alpha=0.25)
hist(xi_20)
head(xi_20)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1)
outdat <- SensitivityNormDatasets(1, 0.20)
xi_20 <- as.data.frame(outdat$xi_sensitive_num)
xi_vals <- cbind.data.frame(xi_05, xi_10, xi_15, xi_20)
colnames(xi_vals) <- c("xi_05", "xi_10", "xi_15", "xi_20")
xi_melt <- melt(xi_vals)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(alpha=0.25)
ggplot(xi_melt,aes(x=value, fill=variable)) +  geom_density(alpha=0.25)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable)) +  geom_density(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable)) +  + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) + geom_density(alpha=0.25)  +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25) + theme_bw()
?geom_density
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=256) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=128) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw()
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab("Number of sensitive outlier methods") + ylab("Density of number of datasets")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab("Number of xi-sensitive outlier methods") + ylab("Density of number of datasets")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab("Number of latex2exp::TeX('$\xi$')-sensitive outlier methods") + ylab("Density of number of datasets")
library("latex2exp")
xlabel <- paste("Number of ", latex2exp::TeX('$\xi$')",-sensitive outlier methods")
xlabel <- paste("Number of ", latex2exp::TeX('$\xi$'), "-sensitive outlier methods")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab(paste("Number of ", latex2exp::TeX('$\xi$'), "-sensitive outlier methods") )+ ylab("Density of number of datasets")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab(paste("Number of xi-sensitive outlier methods") )+ ylab("Density of number of datasets")
latex2exp::TeX('$\xi$')
latex2exp::TeX('\xi')
# ----------------------------------------------------------------------
# Selecting a set of algorithms
# ----------------------------------------------------------------------
clust <- ClusterMethods(kk=8)
clust
which(clust$clustering==1)
citation(package="cluster")
which(clust$clustering==1)
which(clust$clustering==2)
which(clust$clustering==3)
which(clust$clustering==4)
which(clust$clustering==5)
which(clust$clustering==6)
which(clust$clustering==7)
which(clust$clustering==8)
for(i in 1:8){
which(clust$clustering==7)
}
for(i in 1:8){
print(which(clust$clustering==i))
}
for(i in 1:8){
print(paste( which(clust$clustering==i), "\n"))
}
for(i in 1:8){
print(paste("Cluster", i))
print(which(clust$clustering==i))
}
colnames(data_4_svm_mix)
data("perf_vals_roc_all", envir=e)
devtools::load_all()
data("perf_vals_roc_all", envir=e)
data("perf_vals_roc_all")
perfs <- perf_vals_roc_all[ ,2*(1:(2*num_methods))]
num_methods <- dim(perf_vals_roc_all)[2]/4
perfs <- perf_vals_roc_all[ ,2*(1:(2*num_methods))]
colnames(perfs)
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
st <- 1
en <- 2
max.norm.1 <- apply(perfs.1,1,which.max)
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
head(max.norm.1)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
method <- substring(colnames(perfs)[1], 1, pos)
method
file_sources <- GetFileSources(filenames)
methods
## find both good instances
not.sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) < xi)
xi <- 0.05
max.norm <- max.norm.1[-not.sensitive.inds]
file_sources <- GetFileSources(filenames[not.sensitive.inds])
filenames <- features_all$filename
max.norm <- max.norm.1[-not.sensitive.inds]
## find both good instances
not.sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) < xi)
feats <- feat[-not.sensitive.inds,]
feat <- features_all
feats <- feat[-not.sensitive.inds,]
max.norm <- max.norm.1[-not.sensitive.inds]
file_sources <- GetFileSources(filenames[not.sensitive.inds])
unique.sources <- unique(file_sources)
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
new.order
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
#Create 5 equally size folds
folds <- cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
n <- 5
cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
kk <- 1
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
#Create 5 equally size folds
folds <- cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
#Segement your data for n fold CV
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
testSources
testIndices <- which(file_sources %in% testSources)
testIndices
testData <- as.matrix(feats[testIndices, ])
trainData <- as.matrix(feats[-testIndices, ])
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest(trainData, as.factor(trainY))
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
trainY
table(trainY)
testData <- as.matrix(feats[testIndices, ])
trainData <- as.matrix(feats[-testIndices, ])
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
tail(trainData)
testData <- feats[testIndices, ]
trainData <- feats[-testIndices, ]
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
not.sensitive.inds
dim(feats)
head(feats)
is.factor(feats[,1])
feats <- feat[-not.sensitive.inds,-1]
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
testIndices <- which(file_sources %in% testSources)
testData <- feats[testIndices, ]
trainData <- feats[-testIndices, ]
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
preds.rf <- predict(rf.mod,testData,type="class")
preds.rf <- predict(rf.mod,testData,type="class")
colnames(testData)
dim(testData)
testData <- as.matrix(feats[testIndices, ])
preds.rf <- predict(rf.mod,testData,type="class")
apply(testData,2,function(x)sum(is.na(x)))
tail(testData)
not.sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) < xi)
feats <- feat[-not.sensitive.inds,-1]
max.norm <- max.norm.1[-not.sensitive.inds]
file_sources <- GetFileSources(filenames[-not.sensitive.inds])
unique.sources <- unique(file_sources)
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) >= xi)
feats <- feat[sensitive.inds,-1]
max.norm <- max.norm.1[sensitive.inds]
file_sources <- GetFileSources(filenames[sensitive.inds])
unique.sources <- unique(file_sources)
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
#Create 5 equally size folds
folds <- cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
testIndices <- which(file_sources %in% testSources)
testData <- as.matrix(feats[testIndices, ])
trainData <- as.matrix(feats[-testIndices, ])
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
preds.rf <- predict(rf.mod,testData,type="class")
preds.rf
sum(preds.rf==testY)/length(testY)
apply(max.norm.1, 2, table)*100/dim(max.norm.1)[1]
default_accuracy <- table(max.norm.1)
table(max.norm.1)
default_accuracy <- table(max.norm.1)/length(max.norm.1)
table(max.norm.1)/length(max.norm.1)
default_accuracy <- table(max.norm.1)/length(max.norm.1)
default_acc[i] <- max(default_accuracy)
max(default_accuracy)
devtools::load_al()
devtools::load_all()
colnames(perfs)
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
st
en
method_nums
head(perfs.1)
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
st
default_acc
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
default_acc
kk
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
out
out <- PredictNormMethod(method_nums=c(2,4))
method_nums
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs)[1], 1, pos)
methods <- c(methods, method)
methods
st
colnames(perfs.1)
method <- substring(colnames(perfs.1)[1], 1, pos)
method
i
i <- 4
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
i <- 2
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
methods <- c()
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
i <- 4
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
default_accuracy <- table(max.norm.1)/length(max.norm.1)
default_acc[i] <- max(default_accuracy)
devtools::load_all()
devtools::load_all()
out_10 <- PredictNormMethod(xi = 0.10, method_nums=c(2,4))
out_10
out_15 <- PredictNormMethod(xi = 0.15, method_nums=c(2,4))
out_15
sum(pred_perf_diff1 >0)/length(pred_perf_diff)
devtools::load_all()
