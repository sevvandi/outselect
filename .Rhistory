dim(features_all)
data("perf_vals_roc_subset")
dim(perf_vals_roc_subset)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
out <- CrossValidateModels(2,1,1,1,5)
out$def_acc
out$mean_acc
out <- CrossValidateModels(2,1,1,2,5)
e <- new.env()
# ROC values
data("perf_vals_roc_all", envir=e)
perfs <- perf_vals_roc_all
colnames(perfs)
2*(1:dim(perf_vals_roc_all)[2]/2)
2*(1:(dim(perf_vals_roc_all)[2]/2))
perfs <- perf_vals_roc_all[ ,2*(1:(dim(perf_vals_roc_all)[2]/2))]
colnames(perfs)
2*(1:(dim(perfs)[2]/2))
2*(1:(dim(perfs)[2]/2))-1
percentages <- rep(0, dim(perfs_mm)[2])
perfs_mm <- perfs[ , 2*(1:(dim(perfs)[2]/2))]
perfs_iq <- perfs[ , 2*(1:(dim(perfs)[2]/2))-1]
percentages <- rep(0, dim(perfs_mm)[2])
perfs_diff <- perfs_mm - perfs_iq
percentages <- apply(perfs_diff,2,function(x) sum(x>0)/length(x) )
percentages
percentages <- apply(perfs_diff,2,function(x) sum(x>0)/length(x) )*100
percentages
?t.test
head(perfs_diff)
t.test(perfs_mm[,1], perfs_iq[,1], alternative="greater")
percentages
t.test(perfs_diff[ ,1], alternative="greater")
tt <- t.test(perfs_diff[ ,1], alternative="greater")
dim(perfs)
percentages
percentages <- apply(perfs_diff,2,function(x) sum(x>0)/length(x) )
percentages
percentages[1]*(1-percentages[1] )/dim(pers)[1]
percentages[1]*(1-percentages[1] )/dim(perfs)[1]
sqrt(percentages[1]*(1-percentages[1] )/dim(perfs)[1])
*1.96sqrt(percentages[1]*(1-percentages[1] )/dim(perfs)[1])
*1.96*sqrt(percentages[1]*(1-percentages[1] )/dim(perfs)[1])
*1.96*sqrt(percentages[1]*(1-percentages[1] )/dim(perfs)[1])
*1.96*(sqrt(percentages[1]*(1-percentages[1] )/dim(perfs)[1]))
1.96*(sqrt(percentages[1]*(1-percentages[1] )/dim(perfs)[1]))
percentages[1] - 1.96*(sqrt(percentages[1]*(1-percentages[1] )/dim(perfs)[1]))
sum(perfs_diff[,1]>0)
binom.test(6311,dim(perfs_diff)[1],0.5, alternative="one.sided")
binom.test(6311,dim(perfs_diff)[1],0.5, alternative="greater")
i <- 2
binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater")
i <- 3
binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater")
binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
i <- 1
binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
i <- 2
binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
percentages2 <- apply(perfs_diff,2,function(x) sum(x>0.05)/length(x) )
percentages2
percentages2 <- apply(perfs_diff,2,function(x) sum(x>0.01)/length(x) )
percentages2
perfs_diff2 <- perfs_mm - perfs_iq - 0.01
percentages2 <- apply(perfs_diff2,2,function(x) sum(x>0)/length(x) )
binom.test(sum(perfs_diff2[ ,i]>0),dim(perfs_diff2)[1],0.5, alternative="greater", conf.level = 0.99)
percentages2 <- apply(perfs_diff,2,function(x) sum(x>0.05)/length(x) )
perfs_diff2 <- perfs_mm - perfs_iq - 0.05
binom.test(sum(perfs_diff2[ ,i]>0),dim(perfs_diff2)[1],0.5, alternative="greater", conf.level = 0.99)
binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
head(features_all)
binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
binom.test(sum(perfs_diff2[ ,i]>0),dim(perfs_diff2)[1],0.5, alternative="greater", conf.level = 0.99)
percentages2
binom_test <- binom.test(sum(perfs_diff1[ ,i]>0),dim(perfs_diff1)[1],0.5, alternative="greater", conf.level = 0.99)
binom_test <- binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
binom_test
binom_test$p.value
binom_test$conf.int
?binom.test
binom_test <- binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.55, alternative="greater", conf.level = 0.99)
binom_test
binom_test <- binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
binom_test
binom_test$conf.int
binom_test$conf.int[1]
binom_test$conf.int[[1]]
binom_test$conf.int
binom_test$conf.int[1,]
binom_test$conf.int[1:2]
devtools::load_all()
out <- IsMinMaxBetter(1)
out
binom_test <- binom.test(sum(perfs_diff[ ,i]>0),dim(perfs_diff)[1],0.5, alternative="greater", conf.level = 0.99)
binom_test$p.value
i
devtools::load_all()
out <- IsMinMaxBetter()
out
devtools::load_all()
devtools::document()
out2 <- IsMinMaxBetter(2)
out2$percentages
out2$confintervals
devtools::load_all()
out <- IsMinMaxBetter(2)
out
devtools::load_all()
out <- IsMinMaxBetter(2)
out
devtools::load_all()
out <- IsMinMaxBetter(1)
out
devtools::load_all()
out <- IsMinMaxBetter(1)
out
out <- IsMinMaxBetter(1)
devtools::load_all()
out <- IsMinMaxBetter(1)
out
devtools::load_all()
out <- IsMinMaxBetter(1)
out
devtools::load_all()
out <- IsMinMaxBetter(1)
out
devtools::load_all()
devtools::document()
colnames(perfs)
perfs <- perf_vals_roc_all
colnames(perfs)
st_col <- 1
regexpr("_", colnames(perfs)[st_col])
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
pos
method <- substring(colnames(perfs)[st_col], 1, pos)
method
num_methods <- dim(perfs)[2]/4
num_methods
?range
i <- 1
st_col <- 1
en_col <- 4
perf_method <- perfs[ ,st_col:en_col]
ranges <- apply(perf_method, 1, function(x) range(x, na.rm=TRUE))
plot(ranges)
perf_method
ranges
dim(ranges)
ranges[1,]
ranges[2,]
ranges <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
plot(ranges)
hist(ranges)
rangediff <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
hist(rangediff)
rangediff > xi
i <- 1
perf_method <- perfs[ ,st_col:en_col]
rangediff <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
binom_test <- binom.test(sum(rangediff > xi ),length(rangediff), 0.5, alternative="less", conf.level = 0.99)
xi <- 0.05
perf_method <- perfs[ ,st_col:en_col]
rangediff <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
binom_test <- binom.test(sum(rangediff > xi ),length(rangediff), 0.5, alternative="less", conf.level = 0.99)
binom_test
xi = 0.2
perf_method <- perfs[ ,st_col:en_col]
rangediff <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
binom_test <- binom.test(sum(rangediff > xi ),length(rangediff), 0.5, alternative="less", conf.level = 0.99)
binom_test
binom_test <- binom.test(sum(rangediff > xi ),length(rangediff), 0.5, alternative="less", conf.level = 0.99)
binom_test
xi
binom_test <- binom.test(sum(rangediff > xi ),length(rangediff), 0.5, alternative="two.sided", conf.level = 0.99)
binom_test
devtools::load_all()
out <- SensitivityToNorm(1, 0.05)
devtools::load_all()
out <- SensitivityToNorm(1, 0.05)
out
which(out$methods=="FAST")
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
out <-  IsMinMaxBetter(1,0.5)
out
devtools::load_all()
out <-  IsMinMaxBetter(1,0.5)
out
devtools::load_all()
out <-  IsMinMaxBetter(1,0.5)
out
out$percentages
devtools::load_all()
out <-  IsMinMaxBetter(1,0.6)
out
tt <- 1
c("two.sided", "less")[tt]
devtools::load_all()
devtools::load_all()
out <- IsMinMaxBetter(1,0.6,2)
out
out <- IsMinMaxBetter(2,0.6,2)
out
out <- IsMinMaxBetter(2,0.5,1)
out
out <- IsMinMaxBetter(2,0.6,2)
out
e <- new.env()
if(rocpr==1){
# ROC values
data("perf_vals_roc_all", envir=e)
perfs <- perf_vals_roc_all
}else{
# PR values
data("perf_vals_pr_all", envir=e)
perfs <- perf_vals_pr_all
}
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
percentages <- rep(0,num_methods)
p_values <- rep(0, num_methods)
conf_ints <- matrix(0,nrow=num_methods, ncol=2 )
methods <- c()
perf_method <- perfs[ ,st_col:en_col]
rangediff <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
plot(rangediff)
hist(rangediff)
mean(rangediff)
i <- 2
perf_method <- perfs[ ,st_col:en_col]
rangediff <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
hist(rangediff)
st_col <- en_col + 1
en_col <- en_col + 4
perf_method <- perfs[ ,st_col:en_col]
rangediff <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
hist(rangediff)
mean(rangediff)
mean(rangediff, bins = 100)
hist(rangediff, bins = 100)
?hist
hist(rangediff, breaks = 100)
mean(rangediff)
x <- rexp(10000, rate = mean(rangediff))
lines(x)
plot(x)
curve(0.65*exp(-0.65*x), from=0, to=10)
lines(0.65*exp(-0.65*x), from=0, to=10)
sd(rangediff)
rangediff
sd(rangediff)
mean(rangediff)
devtools::load_all()
out2 <- SensitivityToNorm(1, 0.05)
devtools::load_all()
out2 <- SensitivityToNorm(1, 0.05)
out2
?friedman.test
e <- new.env()
if(rocpr==1){
# ROC values
data("perf_vals_roc_all", envir=e)
perfs <- perf_vals_roc_all
}else{
# PR values
data("perf_vals_pr_all", envir=e)
perfs <- perf_vals_pr_all
}
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
percentages <- rep(0,num_methods)
p_values <- rep(0, num_methods)
conf_ints <- matrix(0,nrow=num_methods, ncol=2 )
means <- rep(0, num_methods)
sds <- rep(0, num_methods)
rangediff <- matrix(0, nrow=dim(perf_method)[1], ncol=num_methods)
methods <- c()
for(i in 1:num_methods){
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
means[i] <- mean(rangediff)
sds[i] <- sd(rangediff)
binom_test <- binom.test(sum(rangediff > xi ),length(rangediff), 0.5, alternative="two.sided", conf.level = 0.99)
p_values[i] <- binom_test$p.value
conf_ints[i, ] <- binom_test$conf.int[1:2]
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
st_col <- en_col + 1
en_col <- en_col + 4
}
friedman.test(rangediff)
posthoc.friedman.nemenyi.test(rangediff)
library("PMCMR")
install.packages("PMCMR")
posthoc.friedman.nemenyi.test(rangediff)
library("PMCMR")
posthoc.friedman.nemenyi.test(rangediff)
posthoc.kruskal.nemenyi.test(rangediff)
out2$means
out2$sds
?eexp
install.packages(EnvStats)
install.packages("EnvStats")
library("EnvStats")
eexp(rangediff[,1], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
dim(rangediff)
?friedman.test
i <-
1
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
percentages <- rep(0,num_methods)
p_values <- rep(0, num_methods)
conf_ints <- matrix(0,nrow=num_methods, ncol=2 )
means <- rep(0, num_methods)
sds <- rep(0, num_methods)
rangediff <- matrix(0, nrow=dim(perf_method)[1], ncol=num_methods)
methods <- c()
exptest <- eexp(rangediff[,i], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
means[i] <- mean(rangediff)
sds[i] <- sd(rangediff)
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
exptest <- eexp(rangediff[,i], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
exptest
mean(rangediff)
mean(rangediff[,i])
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
percentages <- rep(0,num_methods)
p_values <- rep(0, num_methods)
conf_ints <- matrix(0,nrow=num_methods, ncol=2 )
means <- rep(0, num_methods)
sds <- rep(0, num_methods)
rangediff <- matrix(0, nrow=dim(perf_method)[1], ncol=num_methods)
methods <- c()
i <- 1
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
means[i] <- mean(rangediff[,i])
sds[i] <- sd(rangediff)
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
exptest <- eexp(rangediff[,i], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
exptest$distribution
exptest$parameters
mean(rangediff[,i])
1/mean(rangediff[,i])
exptest
1/9.056088
1/9.381433
plot(rangediff[,1])
hist(rangediff[,1],breaks=100)
mean(rangediff[,1])
?eexp
exptest$interval
exptest$interval$limits
1/exptest$interval$limits
rev(1/exptest$interval$limits)
devtools::load_all()
devtools::load_all()
out2 <- SensitivityToNorm(1)
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2
which(out2$means > out2$confintervals[,2])
out2$nemenyi$p.value
out2$means
out2$means[1] - out2$means[-1]
kk <- 1
(means[-kk] - means[kk])>conf_ints[-kk]
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk]
(out2$means[-kk] - out2$means[kk])
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk,2]
kk
kk <- 2
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk,2]
kk <- 3
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk,2]
out2$means
out2$confintervals
means[kk] >conf_ints[-kk]
#recs <- which(!is.na(nemenyi$p.value[,kk]))
mat[ ,kk] <-  means[kk] >conf_ints[-kk, 2]
means[kk] >conf_ints[-kk, 2]
kk
kk <- 1
means[kk] >conf_ints[-kk, 2]
out2$nemenyi$p.value
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$friedman
out2$nemenyi
out2$mat
out2$nemenyi$p.adjust.method
out2$nemenyi$p.value
lower.tri(x, diag = TRUE)
lower.tri(out2$mat, diag = TRUE)
out2$mat[lower.tri(out2$mat, diag = TRUE)]
devtools::load_all()
out2 <- SensitivityToNorm()
devtools::load_all()
out2 <- SensitivityToNorm()
out2
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
out2$means[1] > out2$confintervals[2,2]
devtools::load_all()
out2 <- SensitivityToNorm()
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
out2$methods
devtools::load_all()
out2 <- SensitivityToNorm()
out2
mat2 <- matrix(0, nrow=(num_methods), ncol=(num_methods))
diag(mat2) <- 99
mat2[upper.tri(mat2, diag=FALSE)] <- NA
mat2[upper.tri(mat2, diag=FALSE)] <- matta[upper.tri(matta, diag=TRUE)]
mat2[upper.tri(mat2, diag=FALSE)] <- out2$matta[upper.tri(out2$matta, diag=TRUE)]
mat2[lower.tri(mat2, diag=FALSE)] <- out2$matta[lower.tri(out2$matta, diag=TRUE)]
mat2
out$mat
out2$mat
out2$means[1\]
out2$means[1]
out2$confintervals[2,]
out2$confintervals[5,]
out2$confintervals[7,]
out2$confintervals[14,]
?qgamma
?eexp
out2$confintervals[5,]
out2$means[5]
out2$confintervals[1,]
mean(out2$confintervals[1,])
out2$mean[1]
out2$nemenyi$p.value
devtools::load_all()
out2 <- SensitivityToNorm()
devtools::load_all()
out2 <- SensitivityToNorm()
out2
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
out2$nemenyi$p.value
out2$means - out2$confintervals[,2]
out2$means[1] - out2$confintervals[,2]
out2$means[1]
out2$confintervals[9,]
devtools::load_all()
devtools::document()
?SensitivityToNorm
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
?SensitivityToNorm
devtools::load_all()
devtools::load_all()
devtools::document()
?SensitivityToNorm
out <- SensitivityToNorm(1)
out$confintervals
devtools::load_all()
devtools::document()
out$confintervals
out <- SensitivityToNorm(1)
?SensitivityToNorm
out
devtools::load_all()
devtools::document()
out <- SensitivityToNorm(1)
out
devtools::load_all()
out <- SensitivityToNorm(2)
