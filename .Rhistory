res_d1p1s2 <- CrossValidateModels(d=1,p=1,s=2, n=10)
res_d1p1s2 <- CrossValidateModels(d=1,p=1,s=2, n=10)
rm_cols
col_nums
col_nums <- setdiff(col_nums,rm_cols)
col_nums
ftr_subset <- features_mm[ ,col_nums]
result_table <- matrix(0, nrow=n, ncol=dim(perfs)[2])
# Cross validation on file source as many variants of the same file exist
file_source <-c()
for(ll in 1:length(filenames)){
fname <- filenames[ll]
regobj1 <- regexpr("_C", fname)
regobj2 <- regexpr("_withoutdupl", fname)
if(regobj1[1]<0){
regobj <- regobj2
}else if(regobj2[1]<0){
regobj <- regobj1
}else{
regobj <- regobj1
}
end.ind <- regobj[1]-1
file_source <- c(file_source, substring(fname, 1, end.ind))
}
uniq_f_s <- unique(file_source)
uniq_f_s
filenames
length(filenames)
file_source <-c()
for(ll in 1:length(filenames)){
fname <- filenames[ll]
regobj1 <- regexpr("_C", fname)
regobj2 <- regexpr("_withoutdupl", fname)
if(regobj1[1]<0){
regobj <- regobj2
}else if(regobj2[1]<0){
regobj <- regobj1
}else{
regobj <- regobj1
}
end.ind <- regobj[1]-1
file_source <- c(file_source, substring(fname, 1, end.ind))
}
uniq_f_s <- unique(file_source)
uniq_f_s
file_source
length(filenames)
devtools::load_all()
res_d1p1s2 <- CrossValidateModels(d=1,p=1,s=2, n=10)
res_d1p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
devtools::load_all()
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
infs <- apply(features_mm, 2, function(x) sum(is.infinite(x)))
which(infs>0)
indx <- apply(features_mm, 2, function(x) any(is.na(x) | is.infinite(x)))
colnames[indx]
colnames(features_mm)[indx]
apply(features_mm,2,function(x)sum(is.infinite(x)) )
infs <- apply(features_mm,2,function(x)sum(is.infinite(x)) )
which(infs > 0)
infs <- apply(features_mm,2,function(x)sum(is.nan(x)) )
which(infs > 0)
infs <- apply(features_mm,2,function(x)sum(is.infinite(x)) )
data(perf_vals_mm)
infs <- apply(perf_vals_mm,2,function(x)sum(is.infinite(x)) )
which(infs > 0)
devtools::load_all()
devtools::load_all()
res_d2p1 <- CrossValidateModels(d=1,p=1,s=1,n=10)
res_d1p1s2 <- CrossValidateModels(d=1,p=1,s=2,n=10)
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
rm_cols
col_nums <- setdiff(col_nums,rm_cols)
ftr_subset <- features_all[ ,-rm_cols]
2
rm_cols
if(p==1){
# absolute performance  1 or 0
data(abs_perfs_all)
perfs <- abs_perfs_all
}else if(p==2){
# relative performance  1 or 0
data(rel_perfs_0.05_all)
perfs <- rel_perfs_0.05_all
}
p
data(abs_perfs_all)
perfs <- abs_perfs_all
# features are in ftr_subset
# performance values in perfs
result_table <- matrix(0, nrow=n, ncol=dim(perfs)[2])
# Cross validation on file source as many variants of the same file exist
file_source <-c()
for(ll in 1:length(filenames)){
fname <- filenames[ll]
regobj1 <- regexpr("_C", fname)
regobj2 <- regexpr("_withoutdupl", fname)
if(regobj1[1]<0){
regobj <- regobj2
}else if(regobj2[1]<0){
regobj <- regobj1
}else{
regobj <- regobj1
}
end.ind <- regobj[1]-1
file_source <- c(file_source, substring(fname, 1, end.ind))
}
file_source
filenames
for(ll in 1:length(filenames)){
fname <- filenames[ll]
regobj1 <- regexpr("_C", fname)
regobj2 <- regexpr("_withoutdupl", fname)
if(regobj1[1]<0){
regobj <- regobj2
}else if(regobj2[1]<0){
regobj <- regobj1
}else{
regobj <- regobj1
}
end.ind <- regobj[1]-1
file_source <- c(file_source, substring(fname, 1, end.ind))
}
file_source
ftr_subset
ftr_subset <- apply(ftr_subset,2,unitize_2)
colnames(ftr_subset)
rm_cols
ftr_subset <- apply(ftr_subset,2,unitize_2)
devtools::load_all()
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
rm_cols
ftr_subset[,29]
sum(is.nan(ftr_subset[,29]))
sum(is.infinite(ftr_subset[,29]))
which(is.infinite(ftr_subset[,29]))
ftr_subset[10932, 29]
infs <- apply(features_mm,2,function(x)sum(is.infinite(x)) )
which(infs > 0)
infs <- apply(features_mm,1,function(x)sum(is.infinite(x)) )
which(infs > 0)
infcols <- function(x)
{
for (i in 1:ncol(x)){
if ( sum( is.infinite(x[,i]) ) ) > 0
out <- c(out, i)
}
return(out)
}
infcols <- function(x){
out <- c()
for (i in 1:ncol(x)){
if ( sum( is.infinite(x[,i]) ) ) > 0
out <- c(out, i)
}
return(out)
}
infcols <- function(x){
out <- c()
for(i in 1:ncol(x)){
if ( sum( is.infinite(x[,i]) ) ) > 0
out <- c(out, i)
}
return(out)
}
infcols <- function(x){
out <- c()
for(i in 1:ncol(x)){
if (sum(is.infinite(x[,i])) > 0 )
out <- c(out, i)
}
return(out)
}
infc <- infcols(features_mm)
infc
max(features_mm[,30])
max(features_mm[,31])
features_mm <- RemoveInfiniteValues(features_mm, infc)
apply(features_mm,2,max)
apply(features_mm[, -1],2,max)
apply(features_mm[, -1],2,min)
min(apply(features_mm[, -1],2,min))
max(apply(features_mm[, -1],2,max))
usethis::use_data(features_mm, overwrite = TRUE)
f2 <- apply(features_mm[, -1],2,unitize_2)
data(features_mm)
f2 <- apply(features_mm[, -1],2,unitize_2)
features_mm[,30]
data(features_mm)
max(apply(features_mm[, -1],2,max))
min(apply(features_mm[, -1],2,min))
f2 <- apply(features_mm[, -1],2,unitize_1)
apply(f2, 2, max)
apply(f2, 2, min)
devtools::load_all()
res_d1p1s2 <- CrossValidateModels(d=1,p=1,s=2,n=10)
res_d1p1s2$mean_acc
res_d1p1s2$def_acc
getwd()
write_folder <- "//ad.monash.edu/home/User098/skandan/Documents/Research/Preprocessing_Anomalies_And_Instance_Spaces/Conf_Paper/"
write.csv(res_d1p1s2$def_acc, paste(write_folder, "Default_Accuracy_All_Ftrs_Min_Max.csv", sep=""), row.names = FALSE)
write.csv(res_d1p1s2$def_acc, paste(write_folder, "10_fold_CV_Accuracy_All_Ftrs_Min_Max.csv", sep=""), row.names = FALSE)
write.csv(res_d1p1s2$results, paste(write_folder, "10_fold_CV_Accuracy_All_Ftrs_Min_Max.csv", sep=""), row.names = FALSE)
res_d1p1s2$mean_acc
res_d1p1s2$mean_acc*100
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
devtools::load_all()
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
# ---- ALL NORMALIZATION METHODS - PERFORMANCE AND FEATURES
data(features_all)
apply(features_all, 2, max)
which(is.infinite(apply(features_all, 2, max)))
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
rm_cols
rm_cols <- c(1, which(sds==0))
rm_cols
col_nums <- setdiff(col_nums,rm_cols)
col_nums
ftr_subset <- features_all[ ,-rm_cols]
result_table <- matrix(0, nrow=n, ncol=dim(perfs)[2])
if(p==1){
# absolute performance  1 or 0
data(abs_perfs_all)
perfs <- abs_perfs_all
}else if(p==2){
# relative performance  1 or 0
data(rel_perfs_0.05_all)
perfs <- rel_perfs_0.05_all
}
}
# features are in ftr_subset
# performance values in perfs
result_table <- matrix(0, nrow=n, ncol=dim(perfs)[2])
devtools::load_all()
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
nas <- apply(features_all,2, function(x) sum(is.na(x)) )
which(nas >0 )
which(nas >0 )
cols_na
nas <- apply(features_all,2, function(x) sum(is.na(x)) )
which(nas >0 )
devtools::load_all()
fname <- filenames[ll]
res_d2p1s2 <- CrossValidateModels(d=2,p=1,s=2, n=10)
devtools::load_all()
?TrainModels
?CrossValidateModels
devtools::document
devtools::document()
?CrossValidateModels
devtools::document()
devtools::document()
?CrossValidateModels
devtools::document()
?CrossValidateModels
library("RWeka")
dat <- read.csv("C:/Users/Sevvandi/Documents/Research/Preprocessing_Anomalies_And_Instance_Spaces/DataFolder_Input/Datasets_To_Test_Functions/abalone_C1_P02_V07.arff")
dat <- read.arff("C:/Users/Sevvandi/Documents/Research/Preprocessing_Anomalies_And_Instance_Spaces/DataFolder_Input/Datasets_To_Test_Functions/abalone_C1_P02_V07.arff")
ftrs <- ComputeMetaFeaturesMM(dat)
usethis::use_package("infotheo")
install.packages("infothoe")
install.packages("infothoe")
install.packages("infotheo")
usethis::use_package("infotheo")
dat <- read.arff("C:/Users/Sevvandi/Documents/Research/Preprocessing_Anomalies_And_Instance_Spaces/DataFolder_Input/Datasets_To_Test_Functions/abalone_C1_P02_V07.arff")
ftrs <- ComputeMetaFeaturesMM(dat)
??Discretize
devtools::load_all()
ftrs <- ComputeMetaFeaturesMM(dat)
devtools::load_all()
ftrs <- ComputeMetaFeaturesMM(dat)
?mutinformation
devtools::load_all()
ftrs <- ComputeMetaFeaturesMM(dat)
install.packages("moments")
usethis::use_package("moments")
devtools::load_all()
ftrs <- ComputeMetaFeaturesMM(dat)
?FNN
?fnn
??FNN\
??FNN
install.packages("FNN")
?kde
??kde
usethis::use_package("ks")
install.packages("ks")
usethis::use_package("ks")
devtools::load_all()
ftrs <- ComputeMetaFeaturesMM(dat)
devtools::load_all()
usethis::use_package("igraph")
devtools::load_all()
ftrs <- ComputeMetaFeaturesMM(dat)
devtools::load_all()
ftrs <- ComputeMetaFeaturesMM(dat)
system.time(ftrs <- ComputeMetaFeaturesMM(dat))
devtools::load_all()
fit <- TrainModels(1,1,1)
fit
devtools::load_all()
fit <- TrainModels(1,1,1)
fit <- TrainModels(1,1,1)
devtools::load_all()
fit <- TrainModels(1,1,1)
preds <- PredictPerformance(ftrs, fit)
?randomForest::predict
?randomForest
predit.randomForst
if( dim(ftrs)[2] > length(models$cols) ){
x <- ftrs[,models$cols]
}
models <- fit
if( dim(ftrs)[2] > length(models$cols) ){
x <- ftrs[,models$cols]
}
x
pred$cof <- predict(models$cof,newdata=x, type="prob")
pred$cof <- predict(models$cof,newdata=x)
pred$cof <- predict(models$cof,newdata=x)
models$cof
pred$cof <- predict(models$cof,newdata=as.matrix(x))
devtools::load_all()
library(outselect)
178*2
?TrainModels
devtools::load_all(0)
devtools::load_all()
matrix(c(1,2,3,4), ncol=2)
matrix(c(1,2,3,4), nrow=2)
devtools::load_all()
devtools::load_all()
data(Arrhythmia_withoutdupl_05_v05)
dat <- Arrhythmia_withoutdupl_05_v05
feat <- ComputeMetaFeaturesMM(dat)
fit <- TrainModels(1,1,1)
out <- PredictPerformance(feat, fit)
out
svmout <- DrawInstSpace(d=1)
head(xx)
devtools::load_all()
svmout <- DrawInstSpace(d=1)
head(xx)
ggplot2::ggplot(data=xx, aes(x,y))+ geom_point(aes(color=algorithms))
is.data.frame(xx)
head(xx)
head(data)
ggplot2::ggplot(data=data, aes(x,y))+ geom_point())
out <- list()
out$preds10 <- preds.all.1.0
out$predprobs <- preds.all
out$algorithms <- algorithms
out$filenames <- filenames
out$d <- d
out$coordinates <- xx
devtools::load_all()
svmout <- DrawInstSpace(d=1)
head(svmout$coordinates)
ggplot2::ggplot(data=svmout$coordinates, aes(x,y))+ geom_point(aes(color=svmout$algorithms))
colnames(svmout$coordinates)
ggplot2::ggplot(data=svmout$coordinates,aes(x=x,y=y))+ geom_point(aes(color=svmout$algorithms))
?ggplot
ggplot2::ggplot(data=svmout$coordinates,aes("x","y")+ geom_point(aes(color=svmout$algorithms))
)
ggplot2::ggplot(data=svmout$coordinates,aes("x","y"))+ geom_point(aes(color=svmout$algorithms))
install.packages("ggplot2")
install.packages("ggplot2")
devtools::load_all()
ggplot2::ggplot(data=svmout$coordinates,aes("x","y"))+ geom_point(aes(color=svmout$algorithms))
ggplot2::ggplot(data=svmout$coordinates,aes(x,y))+ geom_point(aes(color=svmout$algorithms))
is.data.frame(svmout$coordinates)
devtools::load_all()
svmout <- DrawInstSpace(d=1)
ggplot2::ggplot(data=svmout$coordinates,ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=svmout$algorithms))
data(Arrhythmia_withoutdupl_05_v05)
dat <- Arrhythmia_withoutdupl_05_v05
feat <- ComputeMetaFeaturesMM(dat)
PlotNewInstance(svmout, feat)
col_names
x
i
j
devtools::load_all()
PlotNewInstance(svmout, feat)
dim(feat)
PlotNewInstance(svmout, feat)
proj_mat <- matrix( c(-0.0460, 0.1202, -0.0862, -0.0938, 0.1854, 0.1737, 0.3543, -0.2847, 0.0378, -0.2078,-0.2025, -0.0822, 0.1845, -0.1325), nrow=2 )
proj_mat
feat[ ,col_names]
col_names <- c("OPO_Res_ResOut_Median_1", "OPO_Den_Out_95P_1", "Mean_Entropy_Attr", "OPO_Res_Out_Mean_1", "OPO_GDeg_PO_Mean_1", "IQR_TO_SD_95", "OPO_GDeg_Out_Mean_1")
feat[, col_names]
dim(feat[, col_names])
proj_mat%*%t(feat[ ,col_names])
proj_mat
proj_mat <- matrix( c(-0.0460, 0.1202, -0.0862, -0.0938, 0.1854, 0.1737, 0.3543, -0.2847, 0.0378, -0.2078,-0.2025, -0.0822, 0.1845, -0.1325), nrow=2 )
col_names <- c("OPO_Res_ResOut_Median_1", "OPO_Den_Out_95P_1", "Mean_Entropy_Attr", "OPO_Res_Out_Mean_1", "OPO_GDeg_PO_Mean_1", "IQR_TO_SD_95", "OPO_GDeg_Out_Mean_1")
proj_mat%*%t(feat[ ,col_names])
t(proj_mat%*%t(feat[ ,col_names]))
new_coords <- t(proj_mat%*%t(feat[ ,col_names]))
coordinates <- rbind.data.frame(coordinates, new_coords)
algorithms <- c(algorithms, "NEW INST.")
print(ggplot2::ggplot(data=coordinates, aes(x,y))+ geom_point(aes(color=algorithms)))
devtools::load_all()
PlotNewInstance(svmout, feat)
PlotNewInstance(svmout, feat)
feat
dim(feat)
PlotNewInstance(svmout, feat)
t(proj_mat%*%t(feat[ ,col_names]))
new_coords <- t(proj_mat%*%t(feat[ ,col_names]))
coordinates <- rbind.data.frame(coordinates, new_coords)
colnames(new_coords) <- colnames(coordinates)
coordinates <- rbind.data.frame(coordinates, new_coords)
algorithms <- c(algorithms, "NEW INST.")
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
devtools::load_all()
devtools::load_all()
PlotNewInstance(svmout, feat)
install.packages("viridis")
usethis::use_package("viridis")
devtools::load_all()
PlotNewInstance(svmout, feat)
PlotNewInstance(svmout, feat)
algorithms <- c(algorithms, "NEW INST.")
unique(algorithms)
length(unique(algorithms))
viridis::viridis(length(unique(algorithms)))
colscheme <- viridis::viridis(length(unique(algorithms)))
ggplot2::ggplot(data=coordinates, ggplot2::aes(x,y))+ ggplot2::geom_point(ggplot2::aes(color=colscheme[algorithms]), size=rel_size) + ggplot2::theme_bw()
colscheme[algorithms]
PlotNewInstance(svmout, feat)
algorithms <- c(algorithms, "NEW INST.")
colscheme <- viridis::viridis(length(unique(algorithms)))
colscheme[algorithms]
colscheme
algorithms
colscheme[as.factor(algorithms)]
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
PlotNewInstance(svmout, feat)
devtools::load_all()
devtools::document()
?CrossValidateSVM
devtools::document()
?CrossValidateSVM
devtools::load_all()
devtools::load_all()
devtools::document()
?PlotNewInstance
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
library(outselect)
devtools::use_readme_rmd()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
out <- DrawInstSpace()
devtools::load_all()
devtools::document()
library(outselect)
devtools::load_all(0)
devtools::load_all()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::document()
library(outselect)
devtools::load_all()
devtools::document()
library(outselect)
