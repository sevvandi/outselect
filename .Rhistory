head(pos)
colnames(pos) <- c("x", "y")
######################
data("perf_vals_roc_all")
knnminmax <- perf_vals_roc_all[, 28]
pred_best <- perf_vals_roc_all[pos]
plot(knnminmax, pred_best, pch=20)
abline(0,1)
sum(pred_best > knnminmax)
sum(pred_best > knnminmax)/length(knnminmax)
out <- fit$algo_preds
pred_perf_diff3 <- rep(0,dim(out)[1])
pred_perf_diff1 <- rep(0,dim(out)[1])
preds3 <- rep(0,dim(out)[1])
preds1 <- rep(0,dim(out)[1])
knnminmax <- rep(0,dim(out)[1])
data("perf_vals_roc_subset")
######################
data("perf_vals_roc_subset")
pred_best <- perf_vals_roc_all[pos]
plot(knnminmax, pred_best, pch=20)
abline(0,1)
sum(pred_best > knnminmax)/length(knnminmax)
head(fit$pred_best)
best_method <- apply(fit$pred_best, 1, which.max)
pos <- cbind(1:dim(fit$pred_best)[1],  best_method)
colnames(pos) <- c("x", "y")
knnminmax <- perf_vals_roc_all[, 28]
pred_best <- perf_vals_roc_subset[pos]
plot(knnminmax, pred_best, pch=20)
abline(0,1)
sum(pred_best > knnminmax)/length(knnminmax)
out <- fit$algo_preds
pred_perf_diff3 <- rep(0,dim(out)[1])
pred_perf_diff1 <- rep(0,dim(out)[1])
preds3 <- rep(0,dim(out)[1])
preds1 <- rep(0,dim(out)[1])
knnminmax <- rep(0,dim(out)[1])
data("perf_vals_roc_subset")
for(i in 1:length(pred_perf_diff3)){
methods_inds <- order(out[i,], decreasing = TRUE)[1:3]
preds3[i] <- max( perf_vals_roc_subset[i, methods_inds])
preds1[i] <- perf_vals_roc_subset[i, methods_inds[1]]
knnminmax[i] <- perf_vals_roc_all[i, 28]
pred_perf_diff3[i] <- max( perf_vals_roc_subset[i, methods_inds] - perf_vals_roc_all[i, 28])
pred_perf_diff1[i] <- preds1[i] - perf_vals_roc_all[i, 28]
}
sum(pred_perf_diff3 >0)/length(pred_perf_diff)
sum(pred_perf_diff3 >0)/length(pred_perf_diff3)
sum(pred_perf_diff1 >0)/length(pred_perf_diff3)
plot(knnminmax,preds3, pch=20, xlab="KNN Min-Max AUC", ylab="Predicted methods' AUC")
abline(0,1)
plot(knnminmax,preds1, pch=20, xlab="KNN Min-Max AUC", ylab="Predicted Best method AUC")
plot(knnminmax,preds1, pch=20, xlab="KNN Min-Max AUC", ylab="Predicted Best method AUC")
sum(pred_best > knnminmax)/length(knnminmax)
plot(knnminmax, pred_best, pch=20)
abline(0,1)
out <- pred_best
dim(out)
out <- fit$pred_best
dim(out)
pred_perf_diff3 <- rep(0,dim(out)[1])
pred_perf_diff1 <- rep(0,dim(out)[1])
pred_perf_diff2 <- rep(0,dim(out)[1])
preds3 <- rep(0,dim(out)[1])
preds2 <- rep(0,dim(out)[1])
preds1 <- rep(0,dim(out)[1])
knnminmax <- rep(0,dim(out)[1])
data("perf_vals_roc_subset")
head(out)
pred_perf_diff3 <- rep(0,dim(out)[1])
pred_perf_diff1 <- rep(0,dim(out)[1])
pred_perf_diff2 <- rep(0,dim(out)[1])
preds3 <- rep(0,dim(out)[1])
preds2 <- rep(0,dim(out)[1])
preds1 <- rep(0,dim(out)[1])
knnminmax <- rep(0,dim(out)[1])
data("perf_vals_roc_subset")
for(i in 1:length(pred_perf_diff3)){
methods_inds <- order(out[i,], decreasing = TRUE)[1:3]
preds3[i] <- max( perf_vals_roc_subset[i, methods_inds])
preds2[i] <- max( perf_vals_roc_subset[i, methods_inds[1:2]])
preds1[i] <- perf_vals_roc_subset[i, methods_inds[1]]
knnminmax[i] <- perf_vals_roc_all[i, 28]
pred_perf_diff3[i] <- preds3[i] - perf_vals_roc_all[i, 28])
pred_perf_diff1[i] <- preds1[i] - perf_vals_roc_all[i, 28]
pred_perf_diff2[i] <-  preds2[i] - perf_vals_roc_all[i, 28])
}
pred_perf_diff3 <- rep(0,dim(out)[1])
pred_perf_diff1 <- rep(0,dim(out)[1])
pred_perf_diff2 <- rep(0,dim(out)[1])
preds3 <- rep(0,dim(out)[1])
preds2 <- rep(0,dim(out)[1])
preds1 <- rep(0,dim(out)[1])
knnminmax <- rep(0,dim(out)[1])
data("perf_vals_roc_subset")
for(i in 1:length(pred_perf_diff3)){
methods_inds <- order(out[i,], decreasing = TRUE)[1:3]
preds3[i] <- max( perf_vals_roc_subset[i, methods_inds])
preds2[i] <- max( perf_vals_roc_subset[i, methods_inds[1:2]])
preds1[i] <- perf_vals_roc_subset[i, methods_inds[1]]
knnminmax[i] <- perf_vals_roc_all[i, 28]
pred_perf_diff3[i] <- preds3[i] - perf_vals_roc_all[i, 28]
pred_perf_diff1[i] <- preds1[i] - perf_vals_roc_all[i, 28]
pred_perf_diff2[i] <-  preds2[i] - perf_vals_roc_all[i, 28]
}
sum(pred_perf_diff3 >0)/length(pred_perf_diff3)
sum(pred_perf_diff1 >0)/length(pred_perf_diff3)
sum(pred_perf_diff2 >0)/length(pred_perf_diff3)
plot(knnminmax,preds3, pch=20, xlab="KNN Min-Max AUC", ylab="Predicted methods' AUC")
abline(0,1)
plot(knnminmax,preds1, pch=20, xlab="KNN Min-Max AUC", ylab="Predicted Best method AUC")
abline(0,1)
plot(knnminmax,preds2, pch=20, xlab="KNN Min-Max AUC", ylab="Predicted methods 2' AUC")
abline(0,1)
plot(knnminmax, pred_best, pch=20)
abline(0,1)
plot(knnminmax, pred_best, pch=20)
abline(0,1)
abline(0,1)
abline(0,1)
sum(pred_best > knnminmax)/length(knnminmax)
head(fit$pred_best)
best_method <- apply(fit$pred_best, 1, which.max)
head(best_method)
out <- fit$pred_best
auc_diff <- matrix(0, nrow=nrow(out), ncol=8)
actual_best <- apply(perf_vals_roc_subset, 1, which.max)
head(actual_best)
i <- 1
j <-
1
methods_inds <- order(out[i,], decreasing = TRUE)
preds[i,j] <- sum(actual_best[i]%in% method_inds[1:j])>0
preds[i,j] <- sum(actual_best[i]%in% methods_inds[1:j])>0
preds <- matrix(0, nrow=nrow(out), ncol=8)
preds[i,j] <- sum(actual_best[i]%in% methods_inds[1:j])>0
preds
preds[i,j]
for(j in 1:8){
preds[i,j] <- sum(actual_best[i]%in% methods_inds[1:j])>0
}
preds[i,]
colnames(out)
head(out)
methods_inds
1 %in% methods_inds[1:j]
j
j <- 8
1 %in% methods_inds[1:j]
j <- 1
1 %in% methods_inds[1:j]
out <- fit$pred_best
actual_best <- apply(perf_vals_roc_subset, 1, which.max)
preds <- matrix(0, nrow=nrow(out), ncol=8)
Ensemble_M_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
LOF_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
KNN_Median_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
FAST_ABOD_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
iForest_Median_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
KDEOS_Median_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
KDEOS_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
LDF_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
auc_diff <- matrix(0, nrow=nrow(out), ncol=8)
i
methods_inds <- order(out[i,], decreasing = TRUE)
for(j in 1:8){
preds[i,j] <- sum(actual_best[i]%in% methods_inds[1:j])>0
Ensemble_M_IQR_best[i,j] <- sum(1 %in% methods_inds[1:j])>0
LOF_Min_Max_best[i,j] <- sum(2 %in% methods_inds[1:j])>0
KNN_Median_IQR_best[i,j] <- sum(3 %in% methods_inds[1:j])>0
FAST_ABOD_Min_Max_best[i,j] <- sum(4 %in% methods_inds[1:j])>0
iForest_Median_IQR_best[i,j] <- sum(5 %in% methods_inds[1:j])>0
KDEOS_Median_IQR_best[i,j] <- sum(6 %in% methods_inds[1:j])>0
KDEOS_Min_Max_best[i,j] <- sum(7 %in% methods_inds[1:j])>0
LDF_Min_Max_best[i,j] <- sum(8 %in% methods_inds[1:j])>0
# AUC gain
auc_diff[i,j] <- max(perf_vals_roc_subset[i, methods_inds[1:j]]) - perf_vals_roc_subset[i,3]
}
auc_diff[i,]
preds[1,]
Ensemble_M_IQR_best[1,]
LOF_Min_Max_best[1,]
auc_diff <- matrix(0, nrow=nrow(out), ncol=8)
for(i in 1:dim(out)[1]){
methods_inds <- order(out[i,], decreasing = TRUE)
for(j in 1:8){
preds[i,j] <- sum(actual_best[i]%in% methods_inds[1:j])>0
Ensemble_M_IQR_best[i,j] <- sum(1 %in% methods_inds[1:j])>0
LOF_Min_Max_best[i,j] <- sum(2 %in% methods_inds[1:j])>0
KNN_Median_IQR_best[i,j] <- sum(3 %in% methods_inds[1:j])>0
FAST_ABOD_Min_Max_best[i,j] <- sum(4 %in% methods_inds[1:j])>0
iForest_Median_IQR_best[i,j] <- sum(5 %in% methods_inds[1:j])>0
KDEOS_Median_IQR_best[i,j] <- sum(6 %in% methods_inds[1:j])>0
KDEOS_Min_Max_best[i,j] <- sum(7 %in% methods_inds[1:j])>0
LDF_Min_Max_best[i,j] <- sum(8 %in% methods_inds[1:j])>0
# AUC gain
auc_diff[i,j] <- max(perf_vals_roc_subset[i, methods_inds[1:j]]) - perf_vals_roc_subset[i,3]
}
}
head(preds)
dim(preds)
apply(preds,2, mean)
predicted <- apply(preds,2, mean)
Ens <- apply(Ensemble_M_IQR_best, 2, mean)
Ens
LOF <- apply(LOF_Min_Max_best,2, mean)
LOF
KNN <- apply(KNN_Median_IQR_best,2, mean)
KNN
FAbod <- apply(FAST_ABOD_Min_Max_best,2,best)
FAbod <- apply(FAST_ABOD_Min_Max_best,2,mean)
FAbod
iFor <- apply(iForest_Median_IQR_best,2,mean)
iFor
KdeosQ <- apply(KDEOS_Median_IQR_best, 2, mean)
KdeosM <- apply(KDEOS_Min_Max_best, 2, mean)
LDFM <- apply(LDF_Min_Max_best, 2, mean)
LDFM
df <- cbind.data.frame(predicted, Ens, LOF, KNN, FAbod, iFor, KdeosQ, KdeosM, LDFM )
colnames(preds)
colnames(out)
colnames(df) <- c("Predicted", colnames(out))
dfm <- melt(df)
dfm <- reshape2::melt(df)
head(dfm)
df <- cbind.data.frame(1:8, predicted, Ens, LOF, KNN, FAbod, iFor, KdeosQ, KdeosM, LDFM )
colnames(df) <- c("Number", "Predicted", colnames(out))
head(df)
dfm <- reshape2::melt(df)
head(dfm)
dfm <- reshape2::melt(df, id="Number")
head(dfm <- reshape2::melt(df, id="Number")
)
head(dfm)
ggplot(dfm, aes(Number, value)) + geom_point(aes(color=variable))
library("ggplot2")
ggplot(dfm, aes(Number, value)) + geom_point(aes(color=variable))
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable))
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable)) + theme_bw()
FAbod
predicted
predicted <- apply(preds,2, mean)
Ens <- apply(Ensemble_M_IQR_best, 2, mean)
LOF <- apply(LOF_Min_Max_best,2, mean)
KNN <- apply(KNN_Median_IQR_best,2, mean)
FAbod <- apply(FAST_ABOD_Min_Max_best,2,mean)
iFor <- apply(iForest_Median_IQR_best,2,mean)
KdeosQ <- apply(KDEOS_Median_IQR_best, 2, mean)
KdeosM <- apply(KDEOS_Min_Max_best, 2, mean)
LDFM <- apply(LDF_Min_Max_best, 2, mean)
df <- cbind.data.frame(1:8, predicted, Ens, LOF, KNN, FAbod, iFor, KdeosQ, KdeosM, LDFM )
colnames(df) <- c("Number", "Predicted", colnames(out))
dfm <- reshape2::melt(df, id="Number")
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable)) + theme_bw()
head(dfm)
colnames(df)
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable)) + theme_bw()
iFor
predicted
iFor
FAbod
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable),size=1) + theme_bw()
df <- cbind.data.frame(1:8, predicted, KNN )
colnames(df) <- c("Number", "Predicted", "KNN_Median_IQR")
dfm <- reshape2::melt(df, id="Number")
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable),size=1) + theme_bw()
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable),size=1)+ ylab("Percentage") + xlab("Number of methods") + theme_bw()
head(auc_diff)
dim(auc_diff)
colnames(auc_diff) <- c(1,2,3,4,5,6,7,8)
colnames(auc_diff)
auc_dff_mlt <- melt(auc_diff)
auc_dff_mlt <-reshape2::melt(auc_diff)
head(auc_dff_mlt)
ggplolt(auc_dff_mlt, aes(value)) + geom_boxplot(Var2)
ggplot(auc_dff_mlt, aes(value)) + geom_boxplot(Var2)
head(auc_diff)
auc_dff_mlt <-reshape2::melt(auc_diff)
head(auc_dff_mlt)
ggplot(auc_dff_mlt, aes(value)) + geom_boxplot(Var1)
ggplot(auc_dff_mlt, aes(value)) + geom_boxplot(aes(Var1))
ggplot(auc_dff_mlt, aes(value)) + geom_boxplot(aes(group=Var1))
ggplot(auc_dff_mlt, aes(Var1, value)) + geom_boxplot(aes(group=Var1))
ggplot(auc_dff_mlt, aes(Var1, value)) + geom_boxplot()
colnames(auc_diff) <- c("1M", "2M", "3M", "4M", "5M", "6M", "7M", "8M")
auc_dff_mlt <-reshape2::melt(auc_diff)
ggplot(auc_dff_mlt, aes(Var1, value)) + geom_boxplot()
head(auc_dff_mlt)
head(auc_diff)
ggplot(auc_dff_mlt, aes(Var2, value)) + geom_boxplot()
ggplot(auc_dff_mlt, aes(Var2, value)) + geom_boxplot() + xlab("Number of methods") + ylab("AUC difference")
auc_diff_summary <- apply(auc_diff,2,function(x) sum(x > 0) )
auc_diff_summary
auc_diff_summary <- apply(auc_diff,2,function(x) sum(x > 0) )/dim(auc_diff)[1]
auc_diff_summary
auc_diff_summary <- apply(auc_diff,2,function(x) sum(x >= 0) )/dim(auc_diff)[1]
auc_diff_summary
head(auc_diff)
auc_diff_summary <- apply(auc_diff,2,function(x) length(x >= 0) )/dim(auc_diff)[1]
auc_diff_summary
auc_diff_summary <- apply(auc_diff,2,function(x) sum(x >= 0) )/dim(auc_diff)[1]
auc_diff_summary
auc_diff_summary2 <- apply(auc_diff,2,function(x) sum(x > 0) )/dim(auc_diff)[1]
auc_diff_summary2
sum(pred_perf_diff1 >=0)/length(pred_perf_diff3)
length(pred_perf_diff3)
dim(auc_diff)[1]
head(auc_diff)
apply(auc_diff,2,function(x) sum(x >= 0) )
auc_diff_summary
mlt_auc_diff_summary <- melt(auc_diff_summary)
mlt_auc_diff_summary <- reshape2::melt(auc_diff_summary)
mlt_auc_diff_summary
ggplot(mlt_auc_diff_summary,aes(value)) + geom_line()
df <- cbind(colnames(auc_diff), auc_diff_summary)
df <- cbind(colnames(auc_diff), auc_diff_summary)
df
colnames(df) <- c("Number of Methods", "AUC Percentage")
colnames(df) <- c("Number of Methods", "Percentage")
ggplot(df,aes(value)) + geom_line()
df
df <- cbind(1:8, auc_diff_summary)
colnames(df) <- c("Number of Methods", "Percentage")
colnames(df) <- c("Num_Methods", "Percentage")
ggplot(df,aes(Num_Methods,Percentage )) + geom_line()
df
is.data.frame(df)
df <- as.data.frame(cbind(1:8, auc_diff_summary))
colnames(df) <- c("Num_Methods", "Percentage")
ggplot(df,aes(Num_Methods,Percentage )) + geom_line()
ggplot(df,aes(Num_Methods,Percentage )) + geom_line() + theme_bw()
devtools::load_all()
set.seed(2)
x1 <- rnorm(100,  sd=20)
x21 <- rnorm(50, mean=2)
x22 <- rnorm(50, mean=-2)
x2 <- c(x21, x22)
X <- cbind(x1, x2)
labs <- c(rep(0,99),1)
xvals <- c(45,46,47,48,49,50,51)
roc_obj1 <- rep(0,7)
roc_obj2 <- rep(0,7)
for(i in 1:7){
X[100,] <-c(xvals[i],2)
Xu1 <- apply(X, 2, unitize_1)
knndistXu1 <- knn.dist(Xu1, 5)
ordX1 <- order(knndistXu1[,1], decreasing=TRUE)
roc_obj <- roc(labs, knndistXu1[,1])
roc_obj1[i] <- auc(roc_obj)
Xu3 <- apply(X, 2, unitize_3)
knndistXu3 <- knn.dist(Xu3, 5)
ordX3 <- order(knndistXu3[,1], decreasing=TRUE)
roc_obj <- roc(labs, knndistXu3[,1])
roc_obj2[i] <- auc(roc_obj)
}
plot(X, pch=20, col=c("black", "red")[as.factor(labs)])
roc_obj1
roc_obj2
library("FNN")
library("FNN")
library("pROC")
set.seed(2)
x1 <- rnorm(100,  sd=20)
x21 <- rnorm(50, mean=2)
x22 <- rnorm(50, mean=-2)
x2 <- c(x21, x22)
X <- cbind(x1, x2)
labs <- c(rep(0,99),1)
xvals <- c(45,46,47,48,49,50,51)
roc_obj1 <- rep(0,7)
roc_obj2 <- rep(0,7)
for(i in 1:7){
X[100,] <-c(xvals[i],2)
Xu1 <- apply(X, 2, unitize_1)
knndistXu1 <- knn.dist(Xu1, 5)
ordX1 <- order(knndistXu1[,1], decreasing=TRUE)
roc_obj <- roc(labs, knndistXu1[,1])
roc_obj1[i] <- auc(roc_obj)
Xu3 <- apply(X, 2, unitize_3)
knndistXu3 <- knn.dist(Xu3, 5)
ordX3 <- order(knndistXu3[,1], decreasing=TRUE)
roc_obj <- roc(labs, knndistXu3[,1])
roc_obj2[i] <- auc(roc_obj)
}
plot(X, pch=20, col=c("black", "red")[as.factor(labs)])
roc_obj1
roc_obj2
xvals <- c(4.2,4.3,4.4,4.5,4.6,4.7,4.8)
roc_obj1 <- rep(0,7)
roc_obj2 <- rep(0,7)
for(i in 1:7){
X[100,] <-c(0, xvals[i])
Xu1 <- apply(X, 2, unitize_1)
knndistXu1 <- knn.dist(Xu1, 5)
ordX1 <- order(knndistXu1[,1], decreasing=TRUE)
plot(Xu1, asp=1)
points(Xu1[100, 1],Xu1[100, 2], col="red")
roc_obj <- roc(labs, knndistXu1[,1])
roc_obj1[i] <- auc(roc_obj)
Xu3 <- apply(X, 2, unitize_3)
knndistXu3 <- knn.dist(Xu3, 5)
ordX3 <- order(knndistXu3[,1], decreasing=TRUE)
plot(Xu3[,1:2], asp=1)
points(Xu3[100, 1],Xu3[100, 2], col="red")
roc_obj <- roc(labs, knndistXu3[,1])
roc_obj2[i] <- auc(roc_obj)
}
plot(X, pch=20, col=c("black", "red")[as.factor(labs)])
roc_obj1
roc_obj2
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
outroc$nemenyi
outroc$nemenyi$means
outroc$nemenyi$intervals
devtools::load_all()
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
devtools::load_all()
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
devtools::load_all()
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
devtools::load_all()
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
devtools::load_all()
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
debut(SensitivityToNorm)
debug(SensitivityToNorm)
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
friedman_test
head(df3)
nemenyi
nemenyi$means
colnames(nemenyi$means)
is.data.frame(nemenyi$means)
names(nemenyi$means)
df4 <- df3[ ,-1]
df5 <- df4[ ,order_methods]
order_methods
order_methods <- names(nemenyi$means)
order_methods <- names(nemenyi$means)
df4 <- df3[ ,-1]
df5 <- df4[ ,order_methods]
head(df5)
nemenyi <- tsutils::nemenyi(as.matrix(df5), conf.level=0.95, sort=TRUE,  plottype="matrix", main="Nemenyi test average ranks")
devtools::load_all()
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(1)
# ----------------------------------------------------------------------
# Hypothesis Testing Section
# ----------------------------------------------------------------------
# ---- Mixed model visreg graph ----
vismod <- SensitivityToNormMixedMod(rocpr=2)
# ----------------------------------------------------------------------
# sensitivity to normalization methods
# ----------------------------------------------------------------------
# ---- Nemenyi test average ranks figure ----
outroc <- SensitivityToNorm(2)
citation(pkg="randomForest")
citation("randomForest")
citation("infothoe")
citation("infotheo")
citation("moments")
citation("ks")
citation("e1071")
citation("ggplot2")
citation("quantmod")
citation("dbscan")
citation("FNN")
citation("cluster")
citation("PMCMR")
citation("lme4")
citation("reshape")
citation("multicomp")
citation("multcomp")
citation("tsutils")
citeation("latex2exp")
citation("latex2exp")
citation("pROC")
citation(reshape2)
citation("reshape2")
citation("reshape")
