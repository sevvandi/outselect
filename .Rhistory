friedman_test$statistic
friedman_test$data.name
nemenyi <- PMCMR::posthoc.friedman.nemenyi.test(y=df2$x, groups=df2$m, blocks=df2$s)
nemenyi
devtools::load_all()
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$friedman
out2$methods
out2$nemenyi
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$nemenyi
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$nemenyi
devtools::load_all()
out3 <- SensitivityToNormMixedMod(1)
out3
out3$glht
out3$glht$linfct
out3$fit
out3$fit
out3$fit$coef
out3$fit
summary(out3$fit)
out2$nemenyi
plot(out2$nemenyi)
install.packages("tsutils")
x <- matrix( rnorm(50*4,mean=0,sd=1), 50, 4)
x[,2] <- x[,2]+1
x[,3] <- x[,3]+0.7
x[,4] <- x[,4]+0.5
colnames(x) <- c("Method A","Method B","Method C - long name","Method D")
tsutils::nemenyi(x,conf.level=0.95,plottype="vline")
testnemnyi <- tsutils::nemenyi(x,conf.level=0.95,plottype="mcb")
testnemnyi
testnemnyi <- tsutils::nemenyi(x,conf.level=0.95,plottype="vmcb")
testnemnyi <- tsutils::nemenyi(x,conf.level=0.95,plottype="matrix")
testnemnyi$fpav1
testnemnyi$fpval
testnemnyi$conf.level
testnemnyi$intervals
devtools::load_all()
out2 <- SensitivityToNorm(1)
devtools::load_all()
out2 <- SensitivityToNorm(1)
head(df3)
colnames(df3)
dim(df3)
df3[ ,-1]
dim(df3[ ,-1])
tsutils::nemenyi(df3[ ,-1], conf.level=0.95, plottype="vline")
head(df3[,-1])
nemenyi(as.matrix(df3[ ,-1]), conf.level=0.95, plottype="vline")
tsutils::nemenyi(as.matrix(df3[ ,-1]), conf.level=0.95, plottype="vline")
devtools::load_all()
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$methods
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$medians
tsutils::nemenyi
?tsutils::nemenyi
out2$nemenyi
out$medians
out2$medians
out2 <- SensitivityToNorm(1)
devtools::load_all()
out2 <- SensitivityToNorm(1)
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$nemenyi2$intervals
out2$nemenyi2$fH
out2$nemenyi2$n
out2$nemenyi2$means
devtools::load_all()
out2 <- SensitivityToNorm(1)
x <- matrix( rnorm(50*4,mean=0,sd=1), 50, 4)
x[,2] <- x[,2]+1
x[,3] <- x[,3]+0.7
x[,4] <- x[,4]+0.5
colnames(x) <- c("Method A","Method B","Method C - long name","Method D")
testnemnyi <- tsutils::nemenyi(x,conf.level=0.95,plottype="vline", main="Test")
testnemnyi <- tsutils::nemenyi(x,conf.level=0.95,plottype="vline")
testnemnyi <- tsutils::nemenyi(x,conf.level=0.95,plottype="vline", main="Test")
out2$nemenyi
out2$nemenyi2$fpval
out2$nemenyi2$intervals
install.packages("staplr")
folder <- "//ad.monash.edu/home/User098/skandan/Documents/Educational/Papers and Theses/Algorithm Selection Instance Spaces/"
library(staplr)
?staple_pdf
staple_pdf(input_directory=folder, test)
test <- file.path(folder, paste('Full_pdf.pdf',  sep = ""))
test
folder <- "//ad.monash.edu/home/User098/skandan/Documents/Educational/Papers and Theses/Algorithm Selection Instance Spaces"
test <- file.path(folder, paste('Full_pdf.pdf',  sep = ""))
staple_pdf(input_directory=folder, test)
getwd()
input_directory
dir <- tempdir()
test <- file.path(dir, paste('Full_pdf.pdf',  sep = ""))
staple_pdf(input_directory=folder, test)
test
i <- 1
print(plot(iris[,1] ~ iris[,i], data = iris))
dir <- tempdir()
#require(lattice)
for(i in 1:3) {
pdf(file.path(dir, paste("plot", i, ".pdf", sep = "")))
print(plot(iris[,1] ~ iris[,i], data = iris))
dev.off()
}
output_file <- file.path(dir, paste('Full_pdf.pdf',  sep = ""))
staple_pdf(input_directory = dir, output_file)
dir
?staple_pdf
staple_pdf
staple_pdf(input_directory = dir, input_files=NULL, output_file)
output_file
staple_pdf(input_directory = dir, input_files=NULL, output_filepath = dir)
dir
staple_pdf(input_directory = dir, input_files=NULL, output_filepath = dir)
staple_pdf(input_directory = dir, input_files=NULL, output_filepath = output_file)
staple_pdf(input_directory = dir, output_filepath = output_file)
dir <- tempdir()
#require(lattice)
for(i in 1:3) {
pdf(file.path(dir, paste("plot", i, ".pdf", sep = "")))
print(plot(iris[,1] ~ iris[,i], data = iris))
dev.off()
}
output_file <- file.path(dir, paste('Full_pdf.pdf',  sep = ""))
staple_pdf(input_directory = dir, output_filepath = output_file)
output_filepath
output_file
dir <- tempdir()
#require(lattice)
for(i in 1:3) {
pdf(file.path(dir, paste("plot", i, ".pdf", sep = "")))
print(plot(iris[,1] ~ iris[,i], data = iris))
dev.off()
}
output_file <- file.path(dir, paste('Full_pdf.pdf',  sep = ""))
staple_pdf(input_directory = dir, output_filepath = output_file)
dir
require(lattice)
dir <- tempdir()
require(lattice)
for(i in 1:3) {
pdf(file.path(dir, paste("plot", i, ".pdf", sep = "")))
print(xyplot(iris[,1] ~ iris[,i], data = iris))
dev.off()
}
output_file <- file.path(dir, paste('Full_pdf.pdf',  sep = ""))
staple_pdf(input_directory = dir, output_filepath = output_file)
dir
usethis::use_package("tsutils")
out2$nemenyi2
out2$nemenyi2$means
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$friedman
out2$nemenyi2
staple_pdf()
staple_pdf()
staple_pdf()
staple_pdf()
getwd()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
out2 <- SensitivityToNorm(1)
staple_pdf()
staple_pdf()
library("staplr")
staple_pdf()
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2 <- SensitivityToNorm(1)
out2 <- SensitivityToNorm(1)
out2$friedman
out2$nemenyi
out2$nemenyi$means
out2$nemenyi$intervals
staple_pdf()
out <-  IsMinMaxBetter(1,0.5)
out$pvalues
out$confintervals
outpr <- SensitivityToNorm(2)
devtools::load_all()
devtools::document()
outroc <- SensitivityToNorm(1)
outroc$rangediff
hist(outroc$rangediff[,1])
colnames(outroc$rangediff[,1])
colnames(outroc$rangediff)
library("ggplot2")
df <- outroc$rangediff
rsp_df <- reshape2::melt(df)
head(rsp_df)
colnames(rsp_df) <- c("Filenumber", "Method", "Value")
ggplot(df, aes(Value) ) + geom_density(kernel="gaussian") + facet_grid(.~Method)
ggplot(rsp_df, aes(Value) ) + geom_density(kernel="gaussian") + facet_grid(.~Method)
ggplot(rsp_df, aes(Value) ) + geom_density(kernel="gaussian", col=Method)
ggplot(rsp_df, aes(Value) ) + geom_density(kernel="gaussian", color=Method)
ggplot(rsp_df, aes(Value) ) + geom_density(kernel="gaussian", aes(color=Method) )
ggplot(rsp_df, aes(Value) ) + geom_density(kernel="gaussian", aes(color=Method) ) + theme_bw()
ggplot(rsp_df, aes(Value) )  + geom_boxplot()
ggplot(rsp_df, aes(Value) )  + geom_boxplot(aes(group=Method))
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.shape=NA) + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.shape=NA) + coord_flip() + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.size=0.5) + coord_flip() + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.size=0.4) + coord_flip() + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.size=0.4, outlier.stroke=0.2) + coord_flip() + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.size=0.4, outlier.stroke=0.1) + coord_flip() + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.size=0.4, outlier.stroke=0.1, outlier.alpha=1) + coord_flip() + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.size=0.4, outlier.stroke=0.1, outlier.alpha = 0.1) + coord_flip() + theme_bw()
ggplot(rsp_df, aes(Value) ) + geom_density(kernel="gaussian", aes(color=Method) ) + theme_bw()
data("perf_vals_pr_subset")
dim(perf_vals_pr_subset)
hist(perf_vals_pr_subset[ ,1])
sum(perf_vals_pr_subset > 0.2)
sum(perf_vals_pr_subset[,1] > 0.2)
sum(perf_vals_pr_subset[,2] > 0.2)
sum(perf_vals_pr_subset[,3] > 0.2)
9844/12332*8
9844/(12332*8)
sum(perf_vals_pr_subset > 0.15)
13597/(12332*8)
2200/12238
sum(perf_vals_pr_subset > 0.10)
21286/(12332*8)
?friedman.test
ggplot(rsp_df, aes(Value) ) + geom_density(kernel="gaussian", aes(color=Method) ) + theme_bw()
ggplot(rsp_df, aes(Method, Value) )  + geom_boxplot(outlier.size=0.4, outlier.stroke=0.1, outlier.alpha = 0.1) + coord_flip() + theme_bw()
outroc$friedman
# ----------------------------------------------------------------------
# Figure  - Sensitivity to normalization
# ----------------------------------------------------------------------
outroc <- SensitivityToNorm(1)
outroc$nemenyi$intervals
outroc$nemenyi$means
rocpr=1
if((rocpr!=1)&(rocpr!=2)){
stop("Invalid rocpr. rocpr should equal 1 or 2.")
}
e <- new.env()
if(rocpr==1){
# ROC values
data("perf_vals_roc_all", envir=e)
perfs <- perf_vals_roc_all
data("filenames_roc", envir=e)
filenames <- filenames_roc
}else{
# PR values
data("perf_vals_pr_all", envir=e)
perfs <- perf_vals_pr_all
data("filenames_pr", envir=e)
filenames <- filenames_pr
}
# ---- Find the sources for filenames
file_source <-c()
for(ll in 1:length(filenames)){
fname <- filenames[ll]
regobj1 <- regexpr("_C", fname)
regobj2 <- regexpr("_withoutdupl", fname)
if(regobj1[1]<0){
regobj <- regobj2
}else if(regobj2[1]<0){
regobj <- regobj1
}else{
regobj <- regobj1
}
end.ind <- regobj[1]-1
file_source <- c(file_source, substring(fname, 1, end.ind))
}
uniq_f_s <- unique(file_source)
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
rangediff <- matrix(0, nrow=dim(perfs)[1], ncol=num_methods)
methods <- c()
for(i in 1:num_methods){
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
st_col <- st_col + 4
en_col <- en_col + 4
}
methods[which(methods=="FAST")] <- "FAST_ABOD"
colnames(rangediff) <- methods
xi_sensitive_num <- apply(rangediff, 1, function(x)sum(x > xi))
df <- cbind.data.frame(file_source, xi_sensitive_num)
df2 <- aggregate(df[,-1], by=list(file_source), FUN=sum)
xi <- 0.05
xi_sensitive_num <- apply(rangediff, 1, function(x)sum(x > xi))
df <- cbind.data.frame(file_source, xi_sensitive_num)
df2 <- aggregate(df[,-1], by=list(file_source), FUN=sum)
head(df2)
head(xi_sensitive_num)
head(rangediff)
head(df)
df2 <- aggregate(df[,-1], by=list(file_source), FUN=hist(x))
df2 <- aggregate(df[,-1], by=list(file_source), FUN=hist)
df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x) table(x))
head(df2)
?table(x)
?table
?hist
df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x) hist(x, breaks=0:length(methods)))
df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x) hist(x, breaks=0:length(methods), plot=FALSE))
head(df2)
out <- hist(1:5)
out$counts
df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x) y <- hist(x, breaks=0:length(methods), plot=FALSE); y$counts)
df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x){y <- hist(x, breaks=0:length(methods), plot=FALSE) y$counts})
df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x){ y <- hist(x, breaks=0:length(methods), plot=FALSE); y$counts })
head(df2)
tail(df2)
df3 <- apply(df2[ ,-1], 1, function(x)x/sum(x))
head(df3)
?nemenyi
?tsutils::nemenyi
tsutils::nemenyi(df3, plottype="vline")
head(df3)
colnames(df3)
rownames(df3)
heatmap(df3)
dim(df3)
head(df3)
heatmap(df3) <-
rownames(df3) <-
tsutils::nemenyi(t(df3), plottype="vline")
heatmap(df3) <-
rownames(df3) <-
tsutils::nemenyi(df3, plottype="vline")
dim(df3)
heatmap(df3) <-
colnames(df3) <- uniq_f_s
#heatmap(df3) <-
colnames(df3) <- uniq_f_s
tsutils::nemenyi(df3, plottype="vline")
tsutils::nemenyi(df3, plottype="matrix")
tsutils::nemenyi(df3, sort=TRUE, plottype="matrix")
tsutils::nemenyi(df3, sort=TRUE, plottype="matrix")
tsutils::nemenyi(df3, sort=TRUE, plottype="vline")
tsutils::nemenyi(df3, sort=TRUE, plottype="mcb")
tsutils::nemenyi(df3, sort=TRUE, plottype="line")
tsutils::nemenyi(df3, sort=TRUE, plottype="vmcb")
tsutils::nemenyi(df3, sort=TRUE, plottype="mcb")
?unique(df2)
?unique
head(df2)
which(df2[,1]=="ring")
df2[124,]
df <- cbind.data.frame(file_source, xi_sensitive_num)
head(df)
# df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x){ y <- hist(x, breaks=0:length(methods), plot=FALSE); y$counts })
df2 <- aggregate(df[,-1], by=list(file_source), FUN=median)
head(df2)
head(xi_sensitive_num)
df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x){ y <- hist(x, breaks=0:length(methods), plot=FALSE); y$counts })
head(df2)
head(xi_sensitive_num)
head(df)
?aov
stats::aov(df)
colnames(df)
stats::aov(xi_sensitive_num~file_Source, df)
stats::aov(xi_sensitive_num~file_Source, data=df)
stats::aov(xi_sensitive_num ~ file_Source, data=df)
devtools::load_all()
install.packages("rlang")
devtools::load_all()
devtools::load_all()
install.packages("ggplot2")
devtools::load_all()
devtools::load_all()
rocpr=1
xi=0.05
if((rocpr!=1)&(rocpr!=2)){
stop("Invalid rocpr. rocpr should equal 1 or 2.")
}
e <- new.env()
if(rocpr==1){
# ROC values
data("perf_vals_roc_all", envir=e)
perfs <- perf_vals_roc_all
data("filenames_roc", envir=e)
filenames <- filenames_roc
}else{
# PR values
data("perf_vals_pr_all", envir=e)
perfs <- perf_vals_pr_all
data("filenames_pr", envir=e)
filenames <- filenames_pr
}
# ---- Find the sources for filenames
file_source <-c()
for(ll in 1:length(filenames)){
fname <- filenames[ll]
regobj1 <- regexpr("_C", fname)
regobj2 <- regexpr("_withoutdupl", fname)
if(regobj1[1]<0){
regobj <- regobj2
}else if(regobj2[1]<0){
regobj <- regobj1
}else{
regobj <- regobj1
}
end.ind <- regobj[1]-1
file_source <- c(file_source, substring(fname, 1, end.ind))
}
uniq_f_s <- unique(file_source)
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
rangediff <- matrix(0, nrow=dim(perfs)[1], ncol=num_methods)
methods <- c()
for(i in 1:num_methods){
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
st_col <- st_col + 4
en_col <- en_col + 4
}
methods[which(methods=="FAST")] <- "FAST_ABOD"
colnames(rangediff) <- methods
xi_sensitive_num <- apply(rangediff, 1, function(x)sum(x > xi))
df <- cbind.data.frame(file_source, xi_sensitive_num)
stats::aov(xi_sensitive_num ~ file_Source, data=df)
head(df)
colnames(df)
is.data.frame(df)
aov_out <- stats::aov(xi_sensitive_num ~ file_Source, data=df)
aov_out <- stats::aov(xi_sensitive_num ~ file_source, data=df)
aov_out
aov_out$effects
aov_out$rank
aov_out$coefficients
aov_out$contrasts
aov_out$qr
aov_out$model
aov_out$call
aov_out
summary(aov_out)
?wilcox.test
?kruskal.test
krusk <- stats::kruskal.test(xi_sensitive_num ~ file_source, data=df)
krusk
krusk$statistic
krusk$parameter
krusk$data.name
pairwise.wilcox.test(xi_sensitive_num ~ file_source, data=df, p.adjust.method = "BH")
?pairwise.wilcox.test
pairwise.wilcox.test(x=xi_sensitive_num,  g= file_source, data=df, p.adjust.method = "BH")
wilcox <- pairwise.wilcox.test(x=xi_sensitive_num,  g= file_source, data=df, p.adjust.method = "BH")
warnings()
phoc <- PMCMR::posthoc.kruskal.nemenyi.test(xi_sensitive_num, g= file_source)
xi_sensitive_num
file_source
file_source
xi_sensitive_num
file_source
phoc <- PMCMR::posthoc.kruskal.nemenyi.test(xi_sensitive_num, g= file_source)
phoc <- PMCMR::posthoc.kruskal.nemenyi.test(xi_sensitive_num, file_source)
phoc <- PMCMR::posthoc.kruskal.nemenyi.test(xi_sensitive_num ~file_source, data = df)
phoc
phoc$p.value
phoc$p.value
phoc$p.adjust.method
phoc$statistic
write.csv(phoc$p.value)
write.csv("Phoc_Pvalues.csv",phoc$p.value, row.names = FALSE)
write.csv(phoc$p.value, "Phoc_Pvalues.csv", row.names = FALSE)
getwd()
library("eventstream")
library("ggplot2")
library("reshape2")
# ----------------------------------------------------------------------
# Figures  - Sensitivity to normalization
# ----------------------------------------------------------------------
outroc <- SensitivityToNorm(1)
krusk
df2 <- aggregate(df[,-1], by=list(file_source), FUN=median)
df2
dim(df2)
range(df2[,2])
krusk
krusk$p.value
krusk$data.name
krusk$statistic
# df2 <- aggregate(df[,-1], by=list(file_source), FUN=function(x){ y <- hist(x, breaks=0:length(methods), plot=FALSE); y$counts })
df2 <- aggregate(df[,-1], by=list(file_source), FUN=mean)
df2
ranges <- range(df2[,2])
ranges
which.min(df2[,2])
df2[which.min(df2[,2]), ]
df2[which.max(df2[,2]), ]
devtools::load_all()
devtools::load_all()
devtools::document()
