ggplot(xi_05, aes(x=xi_05)) + geom_density(x=xi_05)
ggplot(xi_05, aes(x=xi_05)) + geom_density()
colnames(xi_05)
colnames(xi_05) <- "xi_05"
ggplot(xi_05, aes(x=xi_05)) + geom_density()
ggplot(xi_05, aes(x=xi_05)) + + geom_hist() + geom_density()
ggplot(xi_05, aes(x=xi_05)) + + geom_histogram() + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram() + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram() + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..)) + geom_density() + theme_bw()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..), binwidth = 5) + geom_density() + theme_bw()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..), binwidth = 14) + geom_density() + theme_bw()
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..), binwidth = 1) + geom_density() + theme_bw()
dim(xi_05)
outdat <- SensitivityNormDatasets(1, 0.10)
xi_10 <- as.data.frame(outdat$xi_sensitive_num)
outdat <- SensitivityNormDatasets(1, 0.15)
xi_15 <- as.data.frame(outdat$xi_sensitive_num)
outdat <- SensitivityNormDatasets(1, 0.20)
xi_20 <- as.data.frame(outdat$xi_sensitive_num)
xi_vals <- cbind.data.frame(xi_05, xi_10, xi_15, xi_20)
colnames(xi_vals)
colnames(xi_vals) <- c("xi_05", "xi_10", "xi_15", "xi_20")
library("reshape2")
xi_melt <- melt(xi_vals)
head(xi_melt)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
ggplot(xi_05, aes(x=xi_05))  + geom_histogram(aes(y = ..density..)) + geom_density() + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25,, binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_density(alpha=0.25, binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1) + geom_density(alpha=0.25)
hist(xi_20)
head(xi_20)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1)
outdat <- SensitivityNormDatasets(1, 0.20)
xi_20 <- as.data.frame(outdat$xi_sensitive_num)
xi_vals <- cbind.data.frame(xi_05, xi_10, xi_15, xi_20)
colnames(xi_vals) <- c("xi_05", "xi_10", "xi_15", "xi_20")
xi_melt <- melt(xi_vals)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(alpha=0.25)
ggplot(xi_melt,aes(x=value, fill=variable)) +  geom_density(alpha=0.25)
ggplot(xi_melt,aes(x=value, fill=variable)) + geom_histogram(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable)) +  geom_density(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable)) +  + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1)
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) + geom_density(alpha=0.25)  +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25) + theme_bw()
?geom_density
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=256) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=128) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw()
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab("Number of sensitive outlier methods") + ylab("Density of number of datasets")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab("Number of xi-sensitive outlier methods") + ylab("Density of number of datasets")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab("Number of latex2exp::TeX('$\xi$')-sensitive outlier methods") + ylab("Density of number of datasets")
library("latex2exp")
xlabel <- paste("Number of ", latex2exp::TeX('$\xi$')",-sensitive outlier methods")
xlabel <- paste("Number of ", latex2exp::TeX('$\xi$'), "-sensitive outlier methods")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab(paste("Number of ", latex2exp::TeX('$\xi$'), "-sensitive outlier methods") )+ ylab("Density of number of datasets")
#ggplot(xi_melt,aes(x=value, fill=variable))   + geom_histogram(aes(y = ..density..), binwidth = 1) +  theme_bw()
ggplot(xi_melt,aes(x=value, fill=variable))   + geom_density(alpha=0.25, n=16) + theme_bw() + xlab(paste("Number of xi-sensitive outlier methods") )+ ylab("Density of number of datasets")
latex2exp::TeX('$\xi$')
latex2exp::TeX('\xi')
# ----------------------------------------------------------------------
# Selecting a set of algorithms
# ----------------------------------------------------------------------
clust <- ClusterMethods(kk=8)
clust
which(clust$clustering==1)
citation(package="cluster")
which(clust$clustering==1)
which(clust$clustering==2)
which(clust$clustering==3)
which(clust$clustering==4)
which(clust$clustering==5)
which(clust$clustering==6)
which(clust$clustering==7)
which(clust$clustering==8)
for(i in 1:8){
which(clust$clustering==7)
}
for(i in 1:8){
print(which(clust$clustering==i))
}
for(i in 1:8){
print(paste( which(clust$clustering==i), "\n"))
}
for(i in 1:8){
print(paste("Cluster", i))
print(which(clust$clustering==i))
}
colnames(data_4_svm_mix)
data("perf_vals_roc_all", envir=e)
devtools::load_all()
data("perf_vals_roc_all", envir=e)
data("perf_vals_roc_all")
perfs <- perf_vals_roc_all[ ,2*(1:(2*num_methods))]
num_methods <- dim(perf_vals_roc_all)[2]/4
perfs <- perf_vals_roc_all[ ,2*(1:(2*num_methods))]
colnames(perfs)
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
st <- 1
en <- 2
max.norm.1 <- apply(perfs.1,1,which.max)
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
head(max.norm.1)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
method <- substring(colnames(perfs)[1], 1, pos)
method
file_sources <- GetFileSources(filenames)
methods
## find both good instances
not.sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) < xi)
xi <- 0.05
max.norm <- max.norm.1[-not.sensitive.inds]
file_sources <- GetFileSources(filenames[not.sensitive.inds])
filenames <- features_all$filename
max.norm <- max.norm.1[-not.sensitive.inds]
## find both good instances
not.sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) < xi)
feats <- feat[-not.sensitive.inds,]
feat <- features_all
feats <- feat[-not.sensitive.inds,]
max.norm <- max.norm.1[-not.sensitive.inds]
file_sources <- GetFileSources(filenames[not.sensitive.inds])
unique.sources <- unique(file_sources)
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
new.order
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
#Create 5 equally size folds
folds <- cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
n <- 5
cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
kk <- 1
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
#Create 5 equally size folds
folds <- cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
#Segement your data for n fold CV
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
testSources
testIndices <- which(file_sources %in% testSources)
testIndices
testData <- as.matrix(feats[testIndices, ])
trainData <- as.matrix(feats[-testIndices, ])
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest(trainData, as.factor(trainY))
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
trainY
table(trainY)
testData <- as.matrix(feats[testIndices, ])
trainData <- as.matrix(feats[-testIndices, ])
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
tail(trainData)
testData <- feats[testIndices, ]
trainData <- feats[-testIndices, ]
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
not.sensitive.inds
dim(feats)
head(feats)
is.factor(feats[,1])
feats <- feat[-not.sensitive.inds,-1]
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
testIndices <- which(file_sources %in% testSources)
testData <- feats[testIndices, ]
trainData <- feats[-testIndices, ]
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
preds.rf <- predict(rf.mod,testData,type="class")
preds.rf <- predict(rf.mod,testData,type="class")
colnames(testData)
dim(testData)
testData <- as.matrix(feats[testIndices, ])
preds.rf <- predict(rf.mod,testData,type="class")
apply(testData,2,function(x)sum(is.na(x)))
tail(testData)
not.sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) < xi)
feats <- feat[-not.sensitive.inds,-1]
max.norm <- max.norm.1[-not.sensitive.inds]
file_sources <- GetFileSources(filenames[-not.sensitive.inds])
unique.sources <- unique(file_sources)
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
sensitive.inds <- which(apply(perfs.1,1,max) - apply(perfs.1,1,min) >= xi)
feats <- feat[sensitive.inds,-1]
max.norm <- max.norm.1[sensitive.inds]
file_sources <- GetFileSources(filenames[sensitive.inds])
unique.sources <- unique(file_sources)
set.seed(123)
new.order <- sample(unique.sources,length(unique.sources))
#Create 5 equally size folds
folds <- cut(seq(1,length(unique.sources)),breaks=n,labels=FALSE)
testSources <- new.order[which(folds==kk,arr.ind=TRUE)]
testIndices <- which(file_sources %in% testSources)
testData <- as.matrix(feats[testIndices, ])
trainData <- as.matrix(feats[-testIndices, ])
y <- max.norm
testY <- y[testIndices]
trainY <- y[-testIndices]
## random forest
rf.mod <- randomForest::randomForest(trainData, as.factor(trainY))
preds.rf <- predict(rf.mod,testData,type="class")
preds.rf
sum(preds.rf==testY)/length(testY)
apply(max.norm.1, 2, table)*100/dim(max.norm.1)[1]
default_accuracy <- table(max.norm.1)
table(max.norm.1)
default_accuracy <- table(max.norm.1)/length(max.norm.1)
table(max.norm.1)/length(max.norm.1)
default_accuracy <- table(max.norm.1)/length(max.norm.1)
default_acc[i] <- max(default_accuracy)
max(default_accuracy)
devtools::load_al()
devtools::load_all()
colnames(perfs)
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
st
en
method_nums
head(perfs.1)
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
st
default_acc
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
default_acc
kk
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
devtools::load_all()
devtools::load_all()
out <- PredictNormMethod(method_nums=c(2,4))
out
out <- PredictNormMethod(method_nums=c(2,4))
method_nums
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs)[1], 1, pos)
methods <- c(methods, method)
methods
st
colnames(perfs.1)
method <- substring(colnames(perfs.1)[1], 1, pos)
method
i
i <- 4
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
i <- 2
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
methods <- c()
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
i <- 4
st <- 2*i-1
en <- st + 1
perfs.1 <- perfs[,st:en]
max.norm.1 <- apply(perfs.1,1,which.max)
pos <- regexpr("_", colnames(perfs.1)[1])[1] -1
method <- substring(colnames(perfs.1)[1], 1, pos)
methods <- c(methods, method)
methods
default_accuracy <- table(max.norm.1)/length(max.norm.1)
default_acc[i] <- max(default_accuracy)
devtools::load_all()
devtools::load_all()
out_10 <- PredictNormMethod(xi = 0.10, method_nums=c(2,4))
out_10
out_15 <- PredictNormMethod(xi = 0.15, method_nums=c(2,4))
out_15
sum(pred_perf_diff1 >0)/length(pred_perf_diff)
devtools::load_all()
citation(package="visreg")
citation(package=igraph)
citation(package="igraph")
citation("ks")
citation("dbscan")
citation("forecast")
citation("forecast", bibtex=TRUE)
citation("forecast")
citation("dbscan")
citation("clusterpam")
install.packages("clusterpam")
citation("cluster")
library(outselect)
# ----------------------------------------------------------------------
library("outselect")
library("ggplot2")
library("reshape2")
library("visreg")
# ----------------------------------------------------------------------
# Instance space - SVM
# ----------------------------------------------------------------------
outsvm <- InstSpace(d=2, vis=TRUE)
outsvm$preds10
outsvm$preds10
outsvm$coordinates
outsvm$algorithms
colnames(outsvm$preds10)
i <- 1
df <- cbind.data.frame(outsvm$coordinates, outsvm$preds10[ ,i])
colnames(df) <- c("x", "y", colnames(outsvm$preds10)[i])
print(ggplot(df, aes(x,y))+ geom_point(color=colnames(outsvm$preds10)[i]))
ggplot(df, aes(x,y))+ geom_point(color=as.factor(colnames(outsvm$preds10)[i]))
ggplot(df, aes(x,y))+ geom_point(color=as.factor(outsvm$preds10)[i])
ggplot(df, aes(x,y))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))
print( ggplot(df, aes(x,y))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))  + guides(fill=guide_legend(title=colnames(outsvm$preds10)[i] ))
)
colnames(outsvm$preds10)[i]
print( ggplot(df, aes(x,y))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))  + guides(fill=guide_legend(title=colnames(outsvm$preds10)[i] )) )
print( ggplot(df, aes(x,y))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))  + scale_fill_discrete(name = "New Legend Title") )
print( ggplot(df, aes(x,y))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))  + scale_fill_manual(legend_title,values=c("orange","red")) )
print( ggplot(df, aes(x,y))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))  + scale_fill_manual("legend_title",values=c("orange","red")) )
ggplot(df, aes(x,y, fill=df[,3]))+ geom_point()
ggplot(df, aes(x,y, fill=df[,3]))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))
print( ggplot(df, aes(x,y))+ geom_point(aes(color=as.factor(outsvm$preds10)[i]))  + labs(outsvm$preds10[,i] = colnames(outsvm$preds10)[i]))
head(df)
method  <- colnames(df)[3]
ggplot(df, aes(x,y))+ geom_point(aes(color=method))
i <- 2
df <- cbind.data.frame(outsvm$coordinates, outsvm$preds10[ ,i])
colnames(df) <- c("x", "y", colnames(outsvm$preds10)[i])
method  <- colnames(df)[3]
ggplot(df, aes(x,y))+ geom_point(aes(color=method))
method
ggplot(df, aes(x,y))+ geom_point(aes(color=df[,3]))
methodos  <- colnames(df)[3]
print( ggplot(df, aes(x,y))+ geom_point(aes(color=df[,3]))  + labs(df[,3] = methodos) )
print( ggplot(df, aes(x,y))+ geom_point(aes(color=df[,3]))  + labs(colnames(df[,3]) = methodos) )
ggplot(df, aes(x,y))+ geom_point(aes(color=df[,3]))
ggplot(df, aes(x,y))+ geom_point(aes(color=&df[,3]))
ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method))   + ggtitle=methodos
print( ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method))   + ggtitle(methodos) )
}
# ----------------------------------------------------------------------
# Does predicting method give better results
# ----------------------------------------------------------------------
data("perf_vals_roc_subset")
fit <- CrossValidateModels(d=2, p=1,rocpr=1, s=1, n=10)
ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method))   + ggtitle(methodos)
)
print( ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method)))   + ggtitle(methodos) )
df <- cbind.data.frame(outsvm$coordinates, outsvm$preds10[ ,i])
colnames(df) <- c("x", "y", "Method")
methodos  <- colnames(outsvm$preds10)[ ,i])
print( ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method)))   + ggtitle(methodos) )
df <- cbind.data.frame(outsvm$coordinates, outsvm$preds10[ ,i])
colnames(df) <- c("x", "y", "Method")
methodos  <- colnames(outsvm$preds10)[ ,i]
print( ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method)))   + ggtitle(methodos) )
for(i in 1:dim(outsvm$preds10)){
df <- cbind.data.frame(outsvm$coordinates, outsvm$preds10[ ,i])
colnames(df) <- c("x", "y", "Method")
methodos  <- colnames(outsvm$preds10)[ ,i]
print( ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method)))   + ggtitle(methodos) )
readline("Enter to see next graph! ")
}
for(i in 1:dim(outsvm$preds10)){
df <- cbind.data.frame(outsvm$coordinates, outsvm$preds10[ ,i])
colnames(df) <- c("x", "y", "Method")
methodos  <- colnames(outsvm$preds10)[i]
print( ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method)))   + ggtitle(methodos) )
readline("Enter to see next graph! ")
}
for(i in 1:dim(outsvm$preds10)[2]){
df <- cbind.data.frame(outsvm$coordinates, outsvm$preds10[ ,i])
colnames(df) <- c("x", "y", "Method")
methodos  <- colnames(outsvm$preds10)[i]
print( ggplot(df, aes(x,y))+ geom_point(aes(color= as.factor(Method)))   + ggtitle(methodos) + coord_equal(ratio=1) + theme_bw() )
readline("Enter to see next graph! ")
}
svmcv <- CrossValidateSVM(d=2,n=5)
svmcv$mean_acc
svmcv$results
devtools::load_all()
# ---- Table 10 results
svmcv <- CrossValidateSVM(d=2,n=5)
svmcv$algonames
cbind(svmcv$algonames, svmcv$mean_acc)
cbind(svmcv$algonames, svmcv$mean_acc, svmcv$def_acc)
cbind(svmcv$def_acc, svmcv$mean_acc )
colnames(output) <- c("Default Accuracy", "Average CV accuracy")
colnames(output)
output <- cbind(svmcv$def_acc, svmcv$mean_acc )
colnames(output) <- c("Default Accuracy", "Average CV accuracy")
output
output <- cbind( svmcv$mean_acc, svmcv$def_acc )
colnames(output) <- c("Average CV accuracy", "Default Accuracy" )
output
data("perf_vals_roc_subset")
fit <- CrossValidateModels(d=2, p=1,rocpr=1, s=1, n=10)
out <- fit$pred_best
actual_best <- apply(perf_vals_roc_subset, 1, which.max)
preds <- matrix(0, nrow=nrow(out), ncol=8)
Ensemble_M_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
LOF_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
KNN_Median_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
FAST_ABOD_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
iForest_Median_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
KDEOS_Median_IQR_best <- matrix(0, nrow=nrow(out), ncol=8)
KDEOS_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
LDF_Min_Max_best <- matrix(0, nrow=nrow(out), ncol=8)
for(i in 1:dim(out)[1]){
methods_inds <- order(out[i,], decreasing = TRUE)
methods_inds2 <- order(perf_vals_roc_subset[i,],decreasing = TRUE)
for(j in 1:8){
preds[i,j] <- sum(actual_best[i]%in% methods_inds[1:j])>0
Ensemble_M_IQR_best[i,j] <- sum(1 %in% methods_inds2[1:j])>0
LOF_Min_Max_best[i,j] <- sum(2 %in% methods_inds2[1:j])>0
KNN_Median_IQR_best[i,j] <- sum(3 %in% methods_inds2[1:j])>0
FAST_ABOD_Min_Max_best[i,j] <- sum(4 %in% methods_inds2[1:j])>0
iForest_Median_IQR_best[i,j] <- sum(5 %in% methods_inds2[1:j])>0
KDEOS_Median_IQR_best[i,j] <- sum(6 %in% methods_inds2[1:j])>0
KDEOS_Min_Max_best[i,j] <- sum(7 %in% methods_inds2[1:j])>0
LDF_Min_Max_best[i,j] <- sum(8 %in% methods_inds2[1:j])>0
}
}
predicted <- apply(preds,2, mean)*100
Ens <- apply(Ensemble_M_IQR_best, 2, mean)*100
LOF <- apply(LOF_Min_Max_best,2, mean)*100
KNN <- apply(KNN_Median_IQR_best,2, mean)*100
FAbod <- apply(FAST_ABOD_Min_Max_best,2,mean)*100
iFor <- apply(iForest_Median_IQR_best,2,mean)*100
KdeosQ <- apply(KDEOS_Median_IQR_best, 2, mean)*100
KdeosM <- apply(KDEOS_Min_Max_best, 2, mean)*100
LDFM <- apply(LDF_Min_Max_best, 2, mean)*100
df <- cbind.data.frame(1:8, predicted, Ens, LOF, KNN, FAbod, iFor, KdeosQ, KdeosM, LDFM )
# ---- Figure 16
dfm <- reshape2::melt(df, id="Number")
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable),size=1) + xlab("Number of algorithms chosen")+ ylab("Best algorithm included %")  + theme_bw()
dfm
colnames(df) <- c("Number", "Predicted", colnames(out))
df <- cbind.data.frame(1:8, predicted, Ens, LOF, KNN, FAbod, iFor, KdeosQ, KdeosM, LDFM )
colnames(df) <- c("Number", "Predicted", colnames(out))
# ---- Figure 16
dfm <- reshape2::melt(df, id="Number")
ggplot(dfm, aes(Number, value)) + geom_line(aes(color=variable),size=1) + xlab("Number of algorithms chosen")+ ylab("Best algorithm included %")  + theme_bw()
library(outselect)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(outselect)
devtools::load_all()
devtools::document()
library(outselect)
