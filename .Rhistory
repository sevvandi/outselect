en_col <- 4
num_methods <- dim(perfs)[2]/4
percentages <- rep(0,num_methods)
p_values <- rep(0, num_methods)
conf_ints <- matrix(0,nrow=num_methods, ncol=2 )
means <- rep(0, num_methods)
sds <- rep(0, num_methods)
rangediff <- matrix(0, nrow=dim(perf_method)[1], ncol=num_methods)
methods <- c()
exptest <- eexp(rangediff[,i], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
means[i] <- mean(rangediff)
sds[i] <- sd(rangediff)
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
exptest <- eexp(rangediff[,i], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
exptest
mean(rangediff)
mean(rangediff[,i])
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
percentages <- rep(0,num_methods)
p_values <- rep(0, num_methods)
conf_ints <- matrix(0,nrow=num_methods, ncol=2 )
means <- rep(0, num_methods)
sds <- rep(0, num_methods)
rangediff <- matrix(0, nrow=dim(perf_method)[1], ncol=num_methods)
methods <- c()
i <- 1
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
percentages[i] <- sum(rangediff > xi )/length(rangediff)
means[i] <- mean(rangediff[,i])
sds[i] <- sd(rangediff)
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
exptest <- eexp(rangediff[,i], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
exptest$distribution
exptest$parameters
mean(rangediff[,i])
1/mean(rangediff[,i])
exptest
1/9.056088
1/9.381433
plot(rangediff[,1])
hist(rangediff[,1],breaks=100)
mean(rangediff[,1])
?eexp
exptest$interval
exptest$interval$limits
1/exptest$interval$limits
rev(1/exptest$interval$limits)
devtools::load_all()
devtools::load_all()
out2 <- SensitivityToNorm(1)
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2
which(out2$means > out2$confintervals[,2])
out2$nemenyi$p.value
out2$means
out2$means[1] - out2$means[-1]
kk <- 1
(means[-kk] - means[kk])>conf_ints[-kk]
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk]
(out2$means[-kk] - out2$means[kk])
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk,2]
kk
kk <- 2
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk,2]
kk <- 3
(out2$means[-kk] - out2$means[kk])> out2$confintervals[-kk,2]
out2$means
out2$confintervals
means[kk] >conf_ints[-kk]
#recs <- which(!is.na(nemenyi$p.value[,kk]))
mat[ ,kk] <-  means[kk] >conf_ints[-kk, 2]
means[kk] >conf_ints[-kk, 2]
kk
kk <- 1
means[kk] >conf_ints[-kk, 2]
out2$nemenyi$p.value
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$friedman
out2$nemenyi
out2$mat
out2$nemenyi$p.adjust.method
out2$nemenyi$p.value
lower.tri(x, diag = TRUE)
lower.tri(out2$mat, diag = TRUE)
out2$mat[lower.tri(out2$mat, diag = TRUE)]
devtools::load_all()
out2 <- SensitivityToNorm()
devtools::load_all()
out2 <- SensitivityToNorm()
out2
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
out2$means[1] > out2$confintervals[2,2]
devtools::load_all()
out2 <- SensitivityToNorm()
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
out2$methods
devtools::load_all()
out2 <- SensitivityToNorm()
out2
mat2 <- matrix(0, nrow=(num_methods), ncol=(num_methods))
diag(mat2) <- 99
mat2[upper.tri(mat2, diag=FALSE)] <- NA
mat2[upper.tri(mat2, diag=FALSE)] <- matta[upper.tri(matta, diag=TRUE)]
mat2[upper.tri(mat2, diag=FALSE)] <- out2$matta[upper.tri(out2$matta, diag=TRUE)]
mat2[lower.tri(mat2, diag=FALSE)] <- out2$matta[lower.tri(out2$matta, diag=TRUE)]
mat2
out$mat
out2$mat
out2$means[1\]
out2$means[1]
out2$confintervals[2,]
out2$confintervals[5,]
out2$confintervals[7,]
out2$confintervals[14,]
?qgamma
?eexp
out2$confintervals[5,]
out2$means[5]
out2$confintervals[1,]
mean(out2$confintervals[1,])
out2$mean[1]
out2$nemenyi$p.value
devtools::load_all()
out2 <- SensitivityToNorm()
devtools::load_all()
out2 <- SensitivityToNorm()
out2
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
devtools::load_all()
out2 <- SensitivityToNorm()
out2$mat
out2$nemenyi$p.value
out2$means - out2$confintervals[,2]
out2$means[1] - out2$confintervals[,2]
out2$means[1]
out2$confintervals[9,]
devtools::load_all()
devtools::document()
?SensitivityToNorm
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
?SensitivityToNorm
devtools::load_all()
devtools::load_all()
devtools::document()
?SensitivityToNorm
out <- SensitivityToNorm(1)
out$confintervals
devtools::load_all()
devtools::document()
out$confintervals
out <- SensitivityToNorm(1)
?SensitivityToNorm
out
devtools::load_all()
devtools::document()
out <- SensitivityToNorm(1)
out
devtools::load_all()
out <- SensitivityToNorm(2)
devtools::load_all()
devtools::document()
out <- SensitivityToNorm(1)
devtools::load_all()
out <- SensitivityToNorm(1)
devtools::document()
out <- SensitivityToNorm(1)
SensitivityToNorm
devtools::load_all()
devtools::document()
out <- SensitivityToNorm(1)
devtools::load_all()
devtools::document()
out <- SensitivityToNorm(1)
out$mat
out2 <- SensitivityToNorm(2)
out2$friedman
out2$mat
out2$means
out2$sds
out$methods
out2$confintervals
set.seed(250)
dat <- rgamma(20, shape = 3, scale = 2)
egamma(dat, ci = TRUE)
set.seed(250)
dat <- rgamma(20, shape = 3, scale = 2)
EnvStats::egamma(dat, ci = TRUE)
?EnvStats::egamma
data("perf_vals_pr_all", envir=e)
perfs <- perf_vals_pr_all
e <- new.env()
data("perf_vals_pr_all", envir=e)
perfs <- perf_vals_pr_all
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
percentages <- rep(0,num_methods)
conf_ints <- matrix(0,nrow=num_methods, ncol=2 )
means <- rep(0, num_methods)
sds <- rep(0, num_methods)
rangediff <- matrix(0, nrow=dim(perfs)[1], ncol=num_methods)
methods <- c()
i <- 1
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
#percentages[i] <- sum(rangediff > xi )/length(rangediff)
means[i] <- mean(rangediff[,i])
sds[i] <- sd(rangediff[,i])
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
plot(rangediff[,i])
hist(rangediff[,i], breaks=100)
obj <- EnvStats::egamma(rangediff[,i],ci=TRUE)
conf_ints[i, ] <- rev(1/exptest$interval$limits)
st_col <- en_col + 1
en_col <- en_col + 4
obj <- EnvStats::egamma(rangediff[,i],ci=TRUE)
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
#percentages[i] <- sum(rangediff > xi )/length(rangediff)
means[i] <- mean(rangediff[,i])
sds[i] <- sd(rangediff[,i])
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
hist(rangediff[,i],breaks=100)
exptest <- EnvStats::eexp(rangediff[,i], method = "mle/mme", ci = TRUE, ci.type = "two-sided",  ci.method = "exact", conf.level = 0.95)
exptest
1/26.12448
exptest$parameters
exptest$parameters[1]
exptest$parameters[2]
devtools::load_all()
devtools::document()
out <- SensitivityToNorm(1)
out$mat
out$methods
exptest$interval$limits
rates[kk] >conf_ints[ ,2]
devtools::load_all()
devtools::document()
out <- SensitivityToNorm(1)
out$mat
out$methods
usethis::use_package("PMCMR")
usethis::use_package("EnvStats")
devtools::load_all()
devtools::document()
out3 <- SensitivityToNorm(2)
out3
?EnvStats::eexp
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$mat
data("perf_vals_roc_all", envir=e)
colnames(perf_vals_roc_all)
##
e <- new.env()
data("features_all", envir=e)
colnames(features_all)
filenames_roc <- features_all[ ,1]
usethis::use_data(filenames_roc)
data("features_all_pr", envir=e)
head(features_all_pr)
colnames(features_all_pr)
filenames_pr <- features_all_pr[ ,1]
usethis::use_data(filenames_pr)
filenames <- filenames_roc
file_source <-c()
for(ll in 1:length(filenames)){
fname <- filenames[ll]
regobj1 <- regexpr("_C", fname)
regobj2 <- regexpr("_withoutdupl", fname)
if(regobj1[1]<0){
regobj <- regobj2
}else if(regobj2[1]<0){
regobj <- regobj1
}else{
regobj <- regobj1
}
end.ind <- regobj[1]-1
file_source <- c(file_source, substring(fname, 1, end.ind))
}
uniq_f_s <- unique(file_source)
uniq_f_s
usethis::use_package("lme4")
perfs <- perf_vals_roc_all
colnames(lme4)
colnames(perfs)
usethis::use_package("reshape")
df <- cbind.data.frame(file_source, rangediff)
file_source
rangediff
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
rangediff <- matrix(0, nrow=dim(perfs)[1], ncol=num_methods)
methods <- c()
for(i in 1:num_methods){
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
}
methods[which(methods=="FAST")] <- "FAST_ABOD"
colnames(rangediff) <- methods
df <- cbind.data.frame(file_source, rangediff)
colnames(df)
st_col <- 1
en_col <- 4
num_methods <- dim(perfs)[2]/4
rangediff <- matrix(0, nrow=dim(perfs)[1], ncol=num_methods)
methods <- c()
for(i in 1:num_methods){
perf_method <- perfs[ ,st_col:en_col]
rangediff[,i] <- apply(perf_method, 1, function(x) diff(range(x, na.rm=TRUE)) )
pos <- regexpr("_", colnames(perfs)[st_col])[1] -1
method <- substring(colnames(perfs)[st_col], 1, pos)
methods <- c(methods, method)
st_col <- st_col + 4
en_col <- en_col + 4
}
methods[which(methods=="FAST")] <- "FAST_ABOD"
colnames(rangediff) <- methods
df <- cbind.data.frame(file_source, rangediff)
colnames(df)
?melt
j <- 1
j <- 2
j <- 1
temp <- reshape::melt(df[ ,c(1,(j+1))
])
head(temp)
colnames(temp) <- c("file_source", "method", "value")
for(j in 1:num_methods){
temp <- reshape::melt(df[ ,c(1,(j+1))])
colnames(temp) <- c("file_source", "method", "value")
if(j==1){
dat <- temp
}else{
dat <- rbind.data.frame(dat, temp)
}
}
for(j in 1:num_methods){
temp <- reshape::melt(df[ ,c(1,(j+1))], id.vars=c(1,2))
colnames(temp) <- c("file_source", "method", "value")
if(j==1){
dat <- temp
}else{
dat <- rbind.data.frame(dat, temp)
}
}
for(j in 1:num_methods){
temp <- reshape::melt(df[ ,c(1,(j+1))], id=c(1,2) )
colnames(temp) <- c("file_source", "method", "value")
if(j==1){
dat <- temp
}else{
dat <- rbind.data.frame(dat, temp)
}
}
for(j in 1:num_methods){
temp <- reshape::melt(df[ ,c(1,(j+1))], id=1:2 )
colnames(temp) <- c("file_source", "method", "value")
if(j==1){
dat <- temp
}else{
dat <- rbind.data.frame(dat, temp)
}
}
for(j in 1:num_methods){
temp <- reshape::melt(df[ ,c(1,(j+1))] )
colnames(temp) <- c("file_source", "method", "value")
if(j==1){
dat <- temp
}else{
dat <- rbind.data.frame(dat, temp)
}
}
tail(dat)
for(j in 1:num_methods){
temp <- reshape::melt(df[ ,c(1,(j+1))] )
colnames(temp) <- c("source", "method", "value")
if(j==1){
dat <- temp
}else{
dat <- rbind.data.frame(dat, temp)
}
}
fit <- lme4::lmer(value ~  method + (1 | Source), data=dat)
fit <- lme4::lmer(value ~  method + (1 | source), data=dat)
fit
usethis::use_package("multcomp")
install.packages("multcomp")
usethis::use_package("multcomp")
obj <- multicomp::glht(fit, linfct = mcp(Norm = "Tukey"))
obj <- multcomp::glht(fit, linfct = mcp(Norm = "Tukey"))
obj <- multcomp::glht(fit, linfct = multcomp::mcp(Norm = "Tukey"))
obj <- multcomp::glht(fit, linfct = multcomp::mcp(method = "Tukey"))
obj
visreg(fit)
visreg::visreg(fit)
install.packages("visreg")
visreg(fit, by="method", partial=FALSE, gg=TRUE) + theme_bw()
visreg::visreg(fit, by="method", partial=FALSE, gg=TRUE) + theme_bw()
visreg::visreg(fit)
visreg::visreg(fit, by="method", partial=FALSE, gg=TRUE) + theme_bw()
visreg::visreg(fit, partial=FALSE, gg=TRUE) + theme_bw()
visreg::visreg(fit, partial=FALSE, gg=TRUE) + ggplot2::theme_bw()
visreg::visreg(fit, partial=FALSE, gg=TRUE) + visreg::theme_bw()
visreg::visreg(fit, partial=FALSE, gg=TRUE) + ggplot2::theme_bw()
visreg::visreg(fit, partial=FALSE, gg=TRUE)
devtools::load_all()
out2 <- SensitivityToNorm(1)
out2$friedman
out2$nemenyi
warpbreaks
wb <- aggregate(warpbreaks$breaks,
by = list(w = warpbreaks$wool,
t = warpbreaks$tension),
FUN = mean)
wb
friedman.test(wb$x, wb$w, wb$t)
friedman.test(x ~ w | t, data = wb)
?wb
?warpbreaks
head(warpbreaks)
friedman.test(breaks ~ wool | tension, data = warpbreaks)
df2 <- aggregate(dat, by=list(method=dat$method, source=dat$source))
df2 <- aggregate(dat, by=list(method=dat$method, source=dat$source), FUN=mean)
warnings()
head(dat)
df2
df2 <- aggregate(dat, by=list(m=dat$method, s=dat$source), FUN=mean)
head(df2)
df2 <- aggregate(dat$value, by=list(m=dat$method, s=dat$source), FUN=mean)
friedman_test <- stats::friedman.test(df2$x, df2$m, df2$s)
friedman_test
out$friedman
dat$method
friedman_test
friedman_test <- stats::friedman.test(y=df2$x, groups=df2$m, blocks=df2$s)
friedman_test
dim(df2)
nemenyi <- PMCMR::posthoc.friedman.nemenyi.test(df2)
nemenyi <- PMCMR::posthoc.friedman.nemenyi.test(y=df2$x, groups=df2$m, blocks=df2$s)
nemenyi
df2$x
df1 <- aggregate(dat$value, by=list(m=dat$method), FUN=mean)
df1
ordering <- order(df1, x)
ordering <- order(df1$x)
ordering
df1[ordering,]
head(dat)
means <- apply(rangediff, 2, mean)
means
ordering <- order(means)
ordering
rangediff <- rangediff[, ordering]
colnames(rangediff)
methods
colnames(rangediff)
df <- cbind.data.frame(file_source, rangediff)
# --- Make a big data frame with source, outlier method and sensitivity to normalization
for(j in 1:num_methods){
temp <- reshape::melt(df[ ,c(1,(j+1))] )
colnames(temp) <- c("source", "method", "value")
if(j==1){
dat <- temp
}else{
dat <- rbind.data.frame(dat, temp)
}
}
df2 <- aggregate(dat$value, by=list(m=dat$method, s=dat$source), FUN=mean)
friedman_test <- stats::friedman.test(y=df2$x, groups=df2$m, blocks=df2$s)
friedman_test
friedman_test$method
friedman_test$statistic
friedman_test$data.name
nemenyi <- PMCMR::posthoc.friedman.nemenyi.test(y=df2$x, groups=df2$m, blocks=df2$s)
nemenyi
devtools::load_all()
